/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGJAVA
#define SWIGJAVA
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1,
  SWIG_JavaIOException,
  SWIG_JavaRuntimeException,
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError,
  SWIG_JavaIllegalStateException,
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { SWIG_JavaIllegalStateException, "java/lang/IllegalStateException" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13




#include "bls-signatures/src/bls.hpp"
#include "bls-signatures/src/chaincode.hpp"
#include "bls-signatures/src/elements.hpp"
#include "bls-signatures/src/extendedprivatekey.hpp"
#include "bls-signatures/src/extendedpublickey.hpp"
#include "bls-signatures/src/hdkeys.hpp"
#include "bls-signatures/src/hkdf.hpp"
#include "bls-signatures/src/privatekey.hpp"
#include "bls-signatures/src/schemes.hpp"
#include "bls-signatures/src/threshold.hpp"
#include "bls-signatures/src/util.hpp"
#include "threshold-v1.hpp"
using namespace bls;


#include <typeinfo>
#include <stdexcept>


#include <vector>
#include <stdexcept>


#include <string>


#include "bls-signatures/src/util.hpp"


/* Check for overflow converting to Java int (always signed 32-bit) from (unsigned variable-bit) size_t */
SWIGINTERN jint SWIG_JavaIntFromSize_t(size_t size) {
  static const jint JINT_MAX = 0x7FFFFFFF;
  return (size > (size_t)JINT_MAX) ? -1 : (jint)size;
}


SWIGINTERN jint SWIG_VectorSize(size_t size) {
  jint sz = SWIG_JavaIntFromSize_t(size);
  if (sz == -1)
    throw std::out_of_range("vector size is too large to fit into a Java int");
  return sz;
}

SWIGINTERN std::vector< uint8_t > *new_std_vector_Sl_uint8_t_Sg___SWIG_2(jint count,unsigned char const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< unsigned char >(static_cast<std::vector< unsigned char >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_uint8_t_Sg__doSize(std::vector< uint8_t > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_uint8_t_Sg__doAdd__SWIG_0(std::vector< uint8_t > *self,std::vector< unsigned char >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_uint8_t_Sg__doAdd__SWIG_1(std::vector< uint8_t > *self,jint index,std::vector< unsigned char >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< unsigned char >::value_type std_vector_Sl_uint8_t_Sg__doRemove(std::vector< uint8_t > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          unsigned char const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< unsigned char >::value_type const &std_vector_Sl_uint8_t_Sg__doGet(std::vector< uint8_t > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< unsigned char >::value_type std_vector_Sl_uint8_t_Sg__doSet(std::vector< uint8_t > *self,jint index,std::vector< unsigned char >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          unsigned char const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_uint8_t_Sg__doRemoveRange(std::vector< uint8_t > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< std::vector< uint8_t > > *new_std_vector_Sl_std_vector_Sl_uint8_t_Sg__Sg___SWIG_2(jint count,std::vector< uint8_t > const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< std::vector< uint8_t > >(static_cast<std::vector< std::vector< uint8_t > >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_std_vector_Sl_uint8_t_Sg__Sg__doSize(std::vector< std::vector< uint8_t > > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_uint8_t_Sg__Sg__doAdd__SWIG_0(std::vector< std::vector< uint8_t > > *self,std::vector< std::vector< unsigned char > >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_uint8_t_Sg__Sg__doAdd__SWIG_1(std::vector< std::vector< uint8_t > > *self,jint index,std::vector< std::vector< unsigned char > >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< std::vector< unsigned char > >::value_type std_vector_Sl_std_vector_Sl_uint8_t_Sg__Sg__doRemove(std::vector< std::vector< uint8_t > > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          std::vector< uint8_t > const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< std::vector< unsigned char > >::value_type const &std_vector_Sl_std_vector_Sl_uint8_t_Sg__Sg__doGet(std::vector< std::vector< uint8_t > > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< std::vector< unsigned char > >::value_type std_vector_Sl_std_vector_Sl_uint8_t_Sg__Sg__doSet(std::vector< std::vector< uint8_t > > *self,jint index,std::vector< std::vector< unsigned char > >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          std::vector< uint8_t > const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_uint8_t_Sg__Sg__doRemoveRange(std::vector< std::vector< uint8_t > > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< bls::PrivateKey > *new_std_vector_Sl_bls_PrivateKey_Sg___SWIG_2(jint count,bls::PrivateKey const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< bls::PrivateKey >(static_cast<std::vector< bls::PrivateKey >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_bls_PrivateKey_Sg__doSize(std::vector< bls::PrivateKey > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_bls_PrivateKey_Sg__doAdd__SWIG_0(std::vector< bls::PrivateKey > *self,std::vector< bls::PrivateKey >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_bls_PrivateKey_Sg__doAdd__SWIG_1(std::vector< bls::PrivateKey > *self,jint index,std::vector< bls::PrivateKey >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< bls::PrivateKey >::value_type std_vector_Sl_bls_PrivateKey_Sg__doRemove(std::vector< bls::PrivateKey > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          bls::PrivateKey const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< bls::PrivateKey >::value_type const &std_vector_Sl_bls_PrivateKey_Sg__doGet(std::vector< bls::PrivateKey > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< bls::PrivateKey >::value_type std_vector_Sl_bls_PrivateKey_Sg__doSet(std::vector< bls::PrivateKey > *self,jint index,std::vector< bls::PrivateKey >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          bls::PrivateKey const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_bls_PrivateKey_Sg__doRemoveRange(std::vector< bls::PrivateKey > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< bls::G1Element > *new_std_vector_Sl_bls_G1Element_Sg___SWIG_2(jint count,bls::G1Element const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< bls::G1Element >(static_cast<std::vector< bls::G1Element >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_bls_G1Element_Sg__doSize(std::vector< bls::G1Element > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_bls_G1Element_Sg__doAdd__SWIG_0(std::vector< bls::G1Element > *self,std::vector< bls::G1Element >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_bls_G1Element_Sg__doAdd__SWIG_1(std::vector< bls::G1Element > *self,jint index,std::vector< bls::G1Element >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< bls::G1Element >::value_type std_vector_Sl_bls_G1Element_Sg__doRemove(std::vector< bls::G1Element > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          bls::G1Element const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< bls::G1Element >::value_type const &std_vector_Sl_bls_G1Element_Sg__doGet(std::vector< bls::G1Element > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< bls::G1Element >::value_type std_vector_Sl_bls_G1Element_Sg__doSet(std::vector< bls::G1Element > *self,jint index,std::vector< bls::G1Element >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          bls::G1Element const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_bls_G1Element_Sg__doRemoveRange(std::vector< bls::G1Element > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< bls::G2Element > *new_std_vector_Sl_bls_G2Element_Sg___SWIG_2(jint count,bls::G2Element const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< bls::G2Element >(static_cast<std::vector< bls::G2Element >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_bls_G2Element_Sg__doSize(std::vector< bls::G2Element > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_bls_G2Element_Sg__doAdd__SWIG_0(std::vector< bls::G2Element > *self,std::vector< bls::G2Element >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_bls_G2Element_Sg__doAdd__SWIG_1(std::vector< bls::G2Element > *self,jint index,std::vector< bls::G2Element >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< bls::G2Element >::value_type std_vector_Sl_bls_G2Element_Sg__doRemove(std::vector< bls::G2Element > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          bls::G2Element const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< bls::G2Element >::value_type const &std_vector_Sl_bls_G2Element_Sg__doGet(std::vector< bls::G2Element > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< bls::G2Element >::value_type std_vector_Sl_bls_G2Element_Sg__doSet(std::vector< bls::G2Element > *self,jint index,std::vector< bls::G2Element >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          bls::G2Element const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_bls_G2Element_Sg__doRemoveRange(std::vector< bls::G2Element > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }

SWIGINTERN void SWIG_JavaException(JNIEnv *jenv, int code, const char *msg) {
  SWIG_JavaExceptionCodes exception_code = SWIG_JavaUnknownError;
  switch(code) {
  case SWIG_MemoryError:
    exception_code = SWIG_JavaOutOfMemoryError;
    break;
  case SWIG_IOError:
    exception_code = SWIG_JavaIOException;
    break;
  case SWIG_SystemError:
  case SWIG_RuntimeError:
    exception_code = SWIG_JavaRuntimeException;
    break;
  case SWIG_OverflowError:
  case SWIG_IndexError:
    exception_code = SWIG_JavaIndexOutOfBoundsException;
    break;
  case SWIG_DivisionByZero:
    exception_code = SWIG_JavaArithmeticException;
    break;
  case SWIG_SyntaxError:
  case SWIG_ValueError:
  case SWIG_TypeError:
    exception_code = SWIG_JavaIllegalArgumentException;
    break;
  case SWIG_UnknownError:
  default:
    exception_code = SWIG_JavaUnknownError;
    break;
  }
  SWIG_JavaThrowException(jenv, exception_code, msg);
}


#include <typeinfo>
#include <stdexcept>

SWIGINTERN long bls_BLS_getContextError(){
        return core_get()->code;
    }
SWIGINTERN void bls_BLS_setContextError(long error){
        core_get()->code = error;
    }
SWIGINTERN long bls_BLS_getContext(){
        return (long)core_get();
    }
SWIGINTERN bool bls_LegacySchemeMPL_aggregateVerify(bls::LegacySchemeMPL *self,vector< bls::G1Element > const &pubkeys,vector< vector< uint8_t > > const &messages,bls::G2Element const &signature){
        std::vector<bls::Bytes> messagesVec;
        messagesVec.reserve(messages.size());
        for (size_t i = 0; i < messages.size(); i++) {
            messagesVec.emplace_back(messages[i]);
        }
        return self->AggregateVerify(pubkeys, messagesVec, signature);
    }

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_new_1Uint8Vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< uint8_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< uint8_t > *)new std::vector< uint8_t >();
  *(std::vector< uint8_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_new_1Uint8Vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< uint8_t > *arg1 = 0 ;
  std::vector< uint8_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint8_t > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< uint8_t > const & reference is null");
    return 0;
  } 
  result = (std::vector< uint8_t > *)new std::vector< uint8_t >((std::vector< uint8_t > const &)*arg1);
  *(std::vector< uint8_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_zipj_bls_ZIPJBLSJNI_Uint8Vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  std::vector< unsigned char >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  result = (std::vector< unsigned char >::size_type)((std::vector< uint8_t > const *)arg1)->capacity();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_zipj_bls_ZIPJBLSJNI_Uint8Vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  std::vector< unsigned char >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  arg2 = (std::vector< unsigned char >::size_type)jarg2; 
  try {
    (arg1)->reserve(arg2);
  } catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jboolean JNICALL Java_org_zipj_bls_ZIPJBLSJNI_Uint8Vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  result = (bool)((std::vector< uint8_t > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_zipj_bls_ZIPJBLSJNI_Uint8Vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_new_1Uint8Vector_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jshort jarg2) {
  jlong jresult = 0 ;
  jint arg1 ;
  unsigned char *arg2 = 0 ;
  unsigned char temp2 ;
  std::vector< uint8_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1; 
  temp2 = (unsigned char)jarg2; 
  arg2 = &temp2; 
  try {
    result = (std::vector< uint8_t > *)new_std_vector_Sl_uint8_t_Sg___SWIG_2(arg1,(unsigned char const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< uint8_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_zipj_bls_ZIPJBLSJNI_Uint8Vector_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  try {
    result = std_vector_Sl_uint8_t_Sg__doSize((std::vector< unsigned char > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_zipj_bls_ZIPJBLSJNI_Uint8Vector_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  std::vector< unsigned char >::value_type *arg2 = 0 ;
  std::vector< unsigned char >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  temp2 = (std::vector< unsigned char >::value_type)jarg2; 
  arg2 = &temp2; 
  std_vector_Sl_uint8_t_Sg__doAdd__SWIG_0(arg1,(unsigned char const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_zipj_bls_ZIPJBLSJNI_Uint8Vector_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jshort jarg3) {
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  jint arg2 ;
  std::vector< unsigned char >::value_type *arg3 = 0 ;
  std::vector< unsigned char >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  arg2 = jarg2; 
  temp3 = (std::vector< unsigned char >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_uint8_t_Sg__doAdd__SWIG_1(arg1,arg2,(unsigned char const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jshort JNICALL Java_org_zipj_bls_ZIPJBLSJNI_Uint8Vector_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jshort jresult = 0 ;
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  jint arg2 ;
  std::vector< unsigned char >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< unsigned char >::value_type)std_vector_Sl_uint8_t_Sg__doRemove(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_org_zipj_bls_ZIPJBLSJNI_Uint8Vector_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jshort jresult = 0 ;
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  jint arg2 ;
  std::vector< unsigned char >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< unsigned char >::value_type *) &std_vector_Sl_uint8_t_Sg__doGet(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = (jshort)*result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_org_zipj_bls_ZIPJBLSJNI_Uint8Vector_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jshort jarg3) {
  jshort jresult = 0 ;
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  jint arg2 ;
  std::vector< unsigned char >::value_type *arg3 = 0 ;
  std::vector< unsigned char >::value_type temp3 ;
  std::vector< unsigned char >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  arg2 = jarg2; 
  temp3 = (std::vector< unsigned char >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    result = (std::vector< unsigned char >::value_type)std_vector_Sl_uint8_t_Sg__doSet(arg1,arg2,(unsigned char const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_zipj_bls_ZIPJBLSJNI_Uint8Vector_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  try {
    std_vector_Sl_uint8_t_Sg__doRemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_org_zipj_bls_ZIPJBLSJNI_delete_1Uint8Vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return ; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return ; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return ; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return ; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return ; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_new_1Uint8VectorVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::vector< uint8_t > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::vector< uint8_t > > *)new std::vector< std::vector< uint8_t > >();
  *(std::vector< std::vector< uint8_t > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_new_1Uint8VectorVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::vector< uint8_t > > *arg1 = 0 ;
  std::vector< std::vector< uint8_t > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< uint8_t > > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< uint8_t > > const & reference is null");
    return 0;
  } 
  result = (std::vector< std::vector< uint8_t > > *)new std::vector< std::vector< uint8_t > >((std::vector< std::vector< uint8_t > > const &)*arg1);
  *(std::vector< std::vector< uint8_t > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_zipj_bls_ZIPJBLSJNI_Uint8VectorVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< std::vector< uint8_t > > *arg1 = (std::vector< std::vector< uint8_t > > *) 0 ;
  std::vector< std::vector< unsigned char > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< uint8_t > > **)&jarg1; 
  result = (std::vector< std::vector< unsigned char > >::size_type)((std::vector< std::vector< uint8_t > > const *)arg1)->capacity();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_zipj_bls_ZIPJBLSJNI_Uint8VectorVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< std::vector< uint8_t > > *arg1 = (std::vector< std::vector< uint8_t > > *) 0 ;
  std::vector< std::vector< unsigned char > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< uint8_t > > **)&jarg1; 
  arg2 = (std::vector< std::vector< unsigned char > >::size_type)jarg2; 
  try {
    (arg1)->reserve(arg2);
  } catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jboolean JNICALL Java_org_zipj_bls_ZIPJBLSJNI_Uint8VectorVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::vector< uint8_t > > *arg1 = (std::vector< std::vector< uint8_t > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< uint8_t > > **)&jarg1; 
  result = (bool)((std::vector< std::vector< uint8_t > > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_zipj_bls_ZIPJBLSJNI_Uint8VectorVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::vector< uint8_t > > *arg1 = (std::vector< std::vector< uint8_t > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< uint8_t > > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_new_1Uint8VectorVector_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  jint arg1 ;
  std::vector< uint8_t > *arg2 = 0 ;
  std::vector< std::vector< uint8_t > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = jarg1; 
  arg2 = *(std::vector< uint8_t > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< uint8_t > const & reference is null");
    return 0;
  } 
  try {
    result = (std::vector< std::vector< uint8_t > > *)new_std_vector_Sl_std_vector_Sl_uint8_t_Sg__Sg___SWIG_2(arg1,(std::vector< unsigned char > const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< std::vector< uint8_t > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_zipj_bls_ZIPJBLSJNI_Uint8VectorVector_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< std::vector< uint8_t > > *arg1 = (std::vector< std::vector< uint8_t > > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< uint8_t > > **)&jarg1; 
  try {
    result = std_vector_Sl_std_vector_Sl_uint8_t_Sg__Sg__doSize((std::vector< std::vector< unsigned char > > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_zipj_bls_ZIPJBLSJNI_Uint8VectorVector_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< std::vector< uint8_t > > *arg1 = (std::vector< std::vector< uint8_t > > *) 0 ;
  std::vector< std::vector< unsigned char > >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< std::vector< uint8_t > > **)&jarg1; 
  arg2 = *(std::vector< std::vector< unsigned char > >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< unsigned char > >::value_type const & reference is null");
    return ;
  } 
  std_vector_Sl_std_vector_Sl_uint8_t_Sg__Sg__doAdd__SWIG_0(arg1,(std::vector< unsigned char > const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_zipj_bls_ZIPJBLSJNI_Uint8VectorVector_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< std::vector< uint8_t > > *arg1 = (std::vector< std::vector< uint8_t > > *) 0 ;
  jint arg2 ;
  std::vector< std::vector< unsigned char > >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< std::vector< uint8_t > > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< std::vector< unsigned char > >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< unsigned char > >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_std_vector_Sl_uint8_t_Sg__Sg__doAdd__SWIG_1(arg1,arg2,(std::vector< unsigned char > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_Uint8VectorVector_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::vector< uint8_t > > *arg1 = (std::vector< std::vector< uint8_t > > *) 0 ;
  jint arg2 ;
  std::vector< std::vector< unsigned char > >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< uint8_t > > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = std_vector_Sl_std_vector_Sl_uint8_t_Sg__Sg__doRemove(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< std::vector< unsigned char > >::value_type **)&jresult = new std::vector< std::vector< unsigned char > >::value_type((const std::vector< std::vector< unsigned char > >::value_type &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_Uint8VectorVector_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::vector< uint8_t > > *arg1 = (std::vector< std::vector< uint8_t > > *) 0 ;
  jint arg2 ;
  std::vector< std::vector< unsigned char > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< uint8_t > > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< std::vector< unsigned char > >::value_type *) &std_vector_Sl_std_vector_Sl_uint8_t_Sg__Sg__doGet(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< std::vector< unsigned char > >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_Uint8VectorVector_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::vector< std::vector< uint8_t > > *arg1 = (std::vector< std::vector< uint8_t > > *) 0 ;
  jint arg2 ;
  std::vector< std::vector< unsigned char > >::value_type *arg3 = 0 ;
  std::vector< std::vector< unsigned char > >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< std::vector< uint8_t > > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< std::vector< unsigned char > >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< unsigned char > >::value_type const & reference is null");
    return 0;
  } 
  try {
    result = std_vector_Sl_std_vector_Sl_uint8_t_Sg__Sg__doSet(arg1,arg2,(std::vector< unsigned char > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< std::vector< unsigned char > >::value_type **)&jresult = new std::vector< std::vector< unsigned char > >::value_type((const std::vector< std::vector< unsigned char > >::value_type &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_zipj_bls_ZIPJBLSJNI_Uint8VectorVector_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< std::vector< uint8_t > > *arg1 = (std::vector< std::vector< uint8_t > > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< uint8_t > > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  try {
    std_vector_Sl_std_vector_Sl_uint8_t_Sg__Sg__doRemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_org_zipj_bls_ZIPJBLSJNI_delete_1Uint8VectorVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::vector< uint8_t > > *arg1 = (std::vector< std::vector< uint8_t > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::vector< uint8_t > > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return ; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return ; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return ; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return ; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return ; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_new_1PrivateKeyVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< bls::PrivateKey > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< bls::PrivateKey > *)new std::vector< bls::PrivateKey >();
  *(std::vector< bls::PrivateKey > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_new_1PrivateKeyVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< bls::PrivateKey > *arg1 = 0 ;
  std::vector< bls::PrivateKey > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bls::PrivateKey > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< bls::PrivateKey > const & reference is null");
    return 0;
  } 
  result = (std::vector< bls::PrivateKey > *)new std::vector< bls::PrivateKey >((std::vector< bls::PrivateKey > const &)*arg1);
  *(std::vector< bls::PrivateKey > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_zipj_bls_ZIPJBLSJNI_PrivateKeyVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< bls::PrivateKey > *arg1 = (std::vector< bls::PrivateKey > *) 0 ;
  std::vector< bls::PrivateKey >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bls::PrivateKey > **)&jarg1; 
  result = (std::vector< bls::PrivateKey >::size_type)((std::vector< bls::PrivateKey > const *)arg1)->capacity();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_zipj_bls_ZIPJBLSJNI_PrivateKeyVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< bls::PrivateKey > *arg1 = (std::vector< bls::PrivateKey > *) 0 ;
  std::vector< bls::PrivateKey >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bls::PrivateKey > **)&jarg1; 
  arg2 = (std::vector< bls::PrivateKey >::size_type)jarg2; 
  try {
    (arg1)->reserve(arg2);
  } catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jboolean JNICALL Java_org_zipj_bls_ZIPJBLSJNI_PrivateKeyVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< bls::PrivateKey > *arg1 = (std::vector< bls::PrivateKey > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bls::PrivateKey > **)&jarg1; 
  result = (bool)((std::vector< bls::PrivateKey > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_zipj_bls_ZIPJBLSJNI_PrivateKeyVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< bls::PrivateKey > *arg1 = (std::vector< bls::PrivateKey > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bls::PrivateKey > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_new_1PrivateKeyVector_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  jint arg1 ;
  bls::PrivateKey *arg2 = 0 ;
  std::vector< bls::PrivateKey > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = jarg1; 
  arg2 = *(bls::PrivateKey **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bls::PrivateKey const & reference is null");
    return 0;
  } 
  try {
    result = (std::vector< bls::PrivateKey > *)new_std_vector_Sl_bls_PrivateKey_Sg___SWIG_2(arg1,(bls::PrivateKey const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< bls::PrivateKey > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_zipj_bls_ZIPJBLSJNI_PrivateKeyVector_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< bls::PrivateKey > *arg1 = (std::vector< bls::PrivateKey > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bls::PrivateKey > **)&jarg1; 
  try {
    result = std_vector_Sl_bls_PrivateKey_Sg__doSize((std::vector< bls::PrivateKey > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_zipj_bls_ZIPJBLSJNI_PrivateKeyVector_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< bls::PrivateKey > *arg1 = (std::vector< bls::PrivateKey > *) 0 ;
  std::vector< bls::PrivateKey >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< bls::PrivateKey > **)&jarg1; 
  arg2 = *(std::vector< bls::PrivateKey >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< bls::PrivateKey >::value_type const & reference is null");
    return ;
  } 
  std_vector_Sl_bls_PrivateKey_Sg__doAdd__SWIG_0(arg1,(bls::PrivateKey const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_zipj_bls_ZIPJBLSJNI_PrivateKeyVector_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< bls::PrivateKey > *arg1 = (std::vector< bls::PrivateKey > *) 0 ;
  jint arg2 ;
  std::vector< bls::PrivateKey >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< bls::PrivateKey > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< bls::PrivateKey >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< bls::PrivateKey >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_bls_PrivateKey_Sg__doAdd__SWIG_1(arg1,arg2,(bls::PrivateKey const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_PrivateKeyVector_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< bls::PrivateKey > *arg1 = (std::vector< bls::PrivateKey > *) 0 ;
  jint arg2 ;
  std::vector< bls::PrivateKey >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bls::PrivateKey > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = std_vector_Sl_bls_PrivateKey_Sg__doRemove(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< bls::PrivateKey >::value_type **)&jresult = new std::vector< bls::PrivateKey >::value_type((const std::vector< bls::PrivateKey >::value_type &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_PrivateKeyVector_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< bls::PrivateKey > *arg1 = (std::vector< bls::PrivateKey > *) 0 ;
  jint arg2 ;
  std::vector< bls::PrivateKey >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bls::PrivateKey > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< bls::PrivateKey >::value_type *) &std_vector_Sl_bls_PrivateKey_Sg__doGet(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< bls::PrivateKey >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_PrivateKeyVector_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::vector< bls::PrivateKey > *arg1 = (std::vector< bls::PrivateKey > *) 0 ;
  jint arg2 ;
  std::vector< bls::PrivateKey >::value_type *arg3 = 0 ;
  std::vector< bls::PrivateKey >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< bls::PrivateKey > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< bls::PrivateKey >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< bls::PrivateKey >::value_type const & reference is null");
    return 0;
  } 
  try {
    result = std_vector_Sl_bls_PrivateKey_Sg__doSet(arg1,arg2,(bls::PrivateKey const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< bls::PrivateKey >::value_type **)&jresult = new std::vector< bls::PrivateKey >::value_type((const std::vector< bls::PrivateKey >::value_type &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_zipj_bls_ZIPJBLSJNI_PrivateKeyVector_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< bls::PrivateKey > *arg1 = (std::vector< bls::PrivateKey > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bls::PrivateKey > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  try {
    std_vector_Sl_bls_PrivateKey_Sg__doRemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_org_zipj_bls_ZIPJBLSJNI_delete_1PrivateKeyVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< bls::PrivateKey > *arg1 = (std::vector< bls::PrivateKey > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< bls::PrivateKey > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return ; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return ; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return ; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return ; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return ; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_new_1G1ElementVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< bls::G1Element > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< bls::G1Element > *)new std::vector< bls::G1Element >();
  *(std::vector< bls::G1Element > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_new_1G1ElementVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< bls::G1Element > *arg1 = 0 ;
  std::vector< bls::G1Element > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bls::G1Element > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< bls::G1Element > const & reference is null");
    return 0;
  } 
  result = (std::vector< bls::G1Element > *)new std::vector< bls::G1Element >((std::vector< bls::G1Element > const &)*arg1);
  *(std::vector< bls::G1Element > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_zipj_bls_ZIPJBLSJNI_G1ElementVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< bls::G1Element > *arg1 = (std::vector< bls::G1Element > *) 0 ;
  std::vector< bls::G1Element >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bls::G1Element > **)&jarg1; 
  result = (std::vector< bls::G1Element >::size_type)((std::vector< bls::G1Element > const *)arg1)->capacity();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_zipj_bls_ZIPJBLSJNI_G1ElementVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< bls::G1Element > *arg1 = (std::vector< bls::G1Element > *) 0 ;
  std::vector< bls::G1Element >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bls::G1Element > **)&jarg1; 
  arg2 = (std::vector< bls::G1Element >::size_type)jarg2; 
  try {
    (arg1)->reserve(arg2);
  } catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jboolean JNICALL Java_org_zipj_bls_ZIPJBLSJNI_G1ElementVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< bls::G1Element > *arg1 = (std::vector< bls::G1Element > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bls::G1Element > **)&jarg1; 
  result = (bool)((std::vector< bls::G1Element > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_zipj_bls_ZIPJBLSJNI_G1ElementVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< bls::G1Element > *arg1 = (std::vector< bls::G1Element > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bls::G1Element > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_new_1G1ElementVector_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  jint arg1 ;
  bls::G1Element *arg2 = 0 ;
  std::vector< bls::G1Element > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = jarg1; 
  arg2 = *(bls::G1Element **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bls::G1Element const & reference is null");
    return 0;
  } 
  try {
    result = (std::vector< bls::G1Element > *)new_std_vector_Sl_bls_G1Element_Sg___SWIG_2(arg1,(bls::G1Element const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< bls::G1Element > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_zipj_bls_ZIPJBLSJNI_G1ElementVector_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< bls::G1Element > *arg1 = (std::vector< bls::G1Element > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bls::G1Element > **)&jarg1; 
  try {
    result = std_vector_Sl_bls_G1Element_Sg__doSize((std::vector< bls::G1Element > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_zipj_bls_ZIPJBLSJNI_G1ElementVector_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< bls::G1Element > *arg1 = (std::vector< bls::G1Element > *) 0 ;
  std::vector< bls::G1Element >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< bls::G1Element > **)&jarg1; 
  arg2 = *(std::vector< bls::G1Element >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< bls::G1Element >::value_type const & reference is null");
    return ;
  } 
  std_vector_Sl_bls_G1Element_Sg__doAdd__SWIG_0(arg1,(bls::G1Element const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_zipj_bls_ZIPJBLSJNI_G1ElementVector_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< bls::G1Element > *arg1 = (std::vector< bls::G1Element > *) 0 ;
  jint arg2 ;
  std::vector< bls::G1Element >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< bls::G1Element > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< bls::G1Element >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< bls::G1Element >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_bls_G1Element_Sg__doAdd__SWIG_1(arg1,arg2,(bls::G1Element const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_G1ElementVector_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< bls::G1Element > *arg1 = (std::vector< bls::G1Element > *) 0 ;
  jint arg2 ;
  std::vector< bls::G1Element >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bls::G1Element > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = std_vector_Sl_bls_G1Element_Sg__doRemove(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< bls::G1Element >::value_type **)&jresult = new std::vector< bls::G1Element >::value_type((const std::vector< bls::G1Element >::value_type &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_G1ElementVector_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< bls::G1Element > *arg1 = (std::vector< bls::G1Element > *) 0 ;
  jint arg2 ;
  std::vector< bls::G1Element >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bls::G1Element > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< bls::G1Element >::value_type *) &std_vector_Sl_bls_G1Element_Sg__doGet(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< bls::G1Element >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_G1ElementVector_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::vector< bls::G1Element > *arg1 = (std::vector< bls::G1Element > *) 0 ;
  jint arg2 ;
  std::vector< bls::G1Element >::value_type *arg3 = 0 ;
  std::vector< bls::G1Element >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< bls::G1Element > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< bls::G1Element >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< bls::G1Element >::value_type const & reference is null");
    return 0;
  } 
  try {
    result = std_vector_Sl_bls_G1Element_Sg__doSet(arg1,arg2,(bls::G1Element const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< bls::G1Element >::value_type **)&jresult = new std::vector< bls::G1Element >::value_type((const std::vector< bls::G1Element >::value_type &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_zipj_bls_ZIPJBLSJNI_G1ElementVector_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< bls::G1Element > *arg1 = (std::vector< bls::G1Element > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bls::G1Element > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  try {
    std_vector_Sl_bls_G1Element_Sg__doRemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_org_zipj_bls_ZIPJBLSJNI_delete_1G1ElementVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< bls::G1Element > *arg1 = (std::vector< bls::G1Element > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< bls::G1Element > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return ; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return ; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return ; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return ; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return ; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_new_1G2ElementVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< bls::G2Element > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< bls::G2Element > *)new std::vector< bls::G2Element >();
  *(std::vector< bls::G2Element > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_new_1G2ElementVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< bls::G2Element > *arg1 = 0 ;
  std::vector< bls::G2Element > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bls::G2Element > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< bls::G2Element > const & reference is null");
    return 0;
  } 
  result = (std::vector< bls::G2Element > *)new std::vector< bls::G2Element >((std::vector< bls::G2Element > const &)*arg1);
  *(std::vector< bls::G2Element > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_zipj_bls_ZIPJBLSJNI_G2ElementVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< bls::G2Element > *arg1 = (std::vector< bls::G2Element > *) 0 ;
  std::vector< bls::G2Element >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bls::G2Element > **)&jarg1; 
  result = (std::vector< bls::G2Element >::size_type)((std::vector< bls::G2Element > const *)arg1)->capacity();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_zipj_bls_ZIPJBLSJNI_G2ElementVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< bls::G2Element > *arg1 = (std::vector< bls::G2Element > *) 0 ;
  std::vector< bls::G2Element >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bls::G2Element > **)&jarg1; 
  arg2 = (std::vector< bls::G2Element >::size_type)jarg2; 
  try {
    (arg1)->reserve(arg2);
  } catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jboolean JNICALL Java_org_zipj_bls_ZIPJBLSJNI_G2ElementVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< bls::G2Element > *arg1 = (std::vector< bls::G2Element > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bls::G2Element > **)&jarg1; 
  result = (bool)((std::vector< bls::G2Element > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_zipj_bls_ZIPJBLSJNI_G2ElementVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< bls::G2Element > *arg1 = (std::vector< bls::G2Element > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bls::G2Element > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_new_1G2ElementVector_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  jint arg1 ;
  bls::G2Element *arg2 = 0 ;
  std::vector< bls::G2Element > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = jarg1; 
  arg2 = *(bls::G2Element **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bls::G2Element const & reference is null");
    return 0;
  } 
  try {
    result = (std::vector< bls::G2Element > *)new_std_vector_Sl_bls_G2Element_Sg___SWIG_2(arg1,(bls::G2Element const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< bls::G2Element > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_zipj_bls_ZIPJBLSJNI_G2ElementVector_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< bls::G2Element > *arg1 = (std::vector< bls::G2Element > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bls::G2Element > **)&jarg1; 
  try {
    result = std_vector_Sl_bls_G2Element_Sg__doSize((std::vector< bls::G2Element > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_zipj_bls_ZIPJBLSJNI_G2ElementVector_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< bls::G2Element > *arg1 = (std::vector< bls::G2Element > *) 0 ;
  std::vector< bls::G2Element >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< bls::G2Element > **)&jarg1; 
  arg2 = *(std::vector< bls::G2Element >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< bls::G2Element >::value_type const & reference is null");
    return ;
  } 
  std_vector_Sl_bls_G2Element_Sg__doAdd__SWIG_0(arg1,(bls::G2Element const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_zipj_bls_ZIPJBLSJNI_G2ElementVector_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< bls::G2Element > *arg1 = (std::vector< bls::G2Element > *) 0 ;
  jint arg2 ;
  std::vector< bls::G2Element >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< bls::G2Element > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< bls::G2Element >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< bls::G2Element >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_bls_G2Element_Sg__doAdd__SWIG_1(arg1,arg2,(bls::G2Element const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_G2ElementVector_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< bls::G2Element > *arg1 = (std::vector< bls::G2Element > *) 0 ;
  jint arg2 ;
  std::vector< bls::G2Element >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bls::G2Element > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = std_vector_Sl_bls_G2Element_Sg__doRemove(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< bls::G2Element >::value_type **)&jresult = new std::vector< bls::G2Element >::value_type((const std::vector< bls::G2Element >::value_type &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_G2ElementVector_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< bls::G2Element > *arg1 = (std::vector< bls::G2Element > *) 0 ;
  jint arg2 ;
  std::vector< bls::G2Element >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bls::G2Element > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< bls::G2Element >::value_type *) &std_vector_Sl_bls_G2Element_Sg__doGet(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< bls::G2Element >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_G2ElementVector_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::vector< bls::G2Element > *arg1 = (std::vector< bls::G2Element > *) 0 ;
  jint arg2 ;
  std::vector< bls::G2Element >::value_type *arg3 = 0 ;
  std::vector< bls::G2Element >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< bls::G2Element > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< bls::G2Element >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< bls::G2Element >::value_type const & reference is null");
    return 0;
  } 
  try {
    result = std_vector_Sl_bls_G2Element_Sg__doSet(arg1,arg2,(bls::G2Element const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< bls::G2Element >::value_type **)&jresult = new std::vector< bls::G2Element >::value_type((const std::vector< bls::G2Element >::value_type &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_zipj_bls_ZIPJBLSJNI_G2ElementVector_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< bls::G2Element > *arg1 = (std::vector< bls::G2Element > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bls::G2Element > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  try {
    std_vector_Sl_bls_G2Element_Sg__doRemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_org_zipj_bls_ZIPJBLSJNI_delete_1G2ElementVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< bls::G2Element > *arg1 = (std::vector< bls::G2Element > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< bls::G2Element > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return ; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return ; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return ; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return ; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return ; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_org_zipj_bls_ZIPJBLSJNI_BLS_1MESSAGE_1HASH_1LEN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  result = (long)bls::BLS::MESSAGE_HASH_LEN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_zipj_bls_ZIPJBLSJNI_BLS_1init(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (bool)bls::BLS::Init();
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_zipj_bls_ZIPJBLSJNI_BLS_1checkRelicErrors(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  {
    try {
      bls::BLS::CheckRelicErrors();
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return ; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return ; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return ; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return ; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return ; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_org_zipj_bls_ZIPJBLSJNI_BLS_1RLC_1OK_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  result = (long)0;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_zipj_bls_ZIPJBLSJNI_BLS_1getContextError(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  result = (long)bls_BLS_getContextError();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_zipj_bls_ZIPJBLSJNI_BLS_1setContextError(JNIEnv *jenv, jclass jcls, jint jarg1) {
  long arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (long)jarg1; 
  bls_BLS_setContextError(arg1);
}


SWIGEXPORT jint JNICALL Java_org_zipj_bls_ZIPJBLSJNI_BLS_1getContext(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  result = (long)bls_BLS_getContext();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_new_1BLS(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  bls::BLS *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (bls::BLS *)new bls::BLS();
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(bls::BLS **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_zipj_bls_ZIPJBLSJNI_delete_1BLS(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  bls::BLS *arg1 = (bls::BLS *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(bls::BLS **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return ; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return ; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return ; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return ; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return ; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_org_zipj_bls_ZIPJBLSJNI_ChainCode_1SIZE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  result = (long)bls::ChainCode::SIZE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_ChainCode_1fromBytes(JNIEnv *jenv, jclass jcls, jbyteArray jarg1) {
  jlong jresult = 0 ;
  bls::Bytes *arg1 = 0 ;
  bls::ChainCode result;
  
  (void)jenv;
  (void)jcls;
  
  Bytes arg1_bytesObject((const uint8_t *)jenv->GetByteArrayElements(jarg1, 0), jenv->GetArrayLength(jarg1));
  arg1 = &arg1_bytesObject;
  
  {
    try {
      result = bls::ChainCode::FromBytes((bls::Bytes const &)*arg1);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(bls::ChainCode **)&jresult = new bls::ChainCode((const bls::ChainCode &)result); 
  {
    jenv->ReleaseByteArrayElements(jarg1, (jbyte *) arg1->begin(), 0);
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_new_1ChainCode_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  bls::ChainCode *arg1 = 0 ;
  bls::ChainCode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::ChainCode **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bls::ChainCode const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bls::ChainCode *)new bls::ChainCode((bls::ChainCode const &)*arg1);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(bls::ChainCode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_zipj_bls_ZIPJBLSJNI_objectEquals_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  bls::ChainCode *arg1 = 0 ;
  bls::ChainCode *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(bls::ChainCode **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bls::ChainCode const & reference is null");
    return 0;
  } 
  arg2 = *(bls::ChainCode **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bls::ChainCode const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)operator ==((bls::ChainCode const &)*arg1,(bls::ChainCode const &)*arg2);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_zipj_bls_ZIPJBLSJNI_ChainCode_1serialize_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2) {
  bls::ChainCode *arg1 = (bls::ChainCode *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::ChainCode **)&jarg1; 
  {
    arg2 = (unsigned char *) jenv->GetByteArrayElements(jarg2, 0);
  }
  {
    try {
      ((bls::ChainCode const *)arg1)->Serialize(arg2);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return ; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return ; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return ; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return ; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return ; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
  {
    jenv->ReleaseByteArrayElements(jarg2, (jbyte *) arg2, 0);
  }
  
}


SWIGEXPORT jbyteArray JNICALL Java_org_zipj_bls_ZIPJBLSJNI_ChainCode_1serialize_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jbyteArray jresult = 0 ;
  bls::ChainCode *arg1 = (bls::ChainCode *) 0 ;
  std::vector< uint8_t > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::ChainCode **)&jarg1; 
  {
    try {
      result = ((bls::ChainCode const *)arg1)->Serialize();
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  {
    const jsize sz = (&result)->size();
    jresult = jenv->NewByteArray(sz);
    jenv->SetByteArrayRegion(jresult, 0, sz, reinterpret_cast<jbyte *>((&result)->data()));
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_new_1ChainCode_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  bls::ChainCode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (bls::ChainCode *)new bls::ChainCode();
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(bls::ChainCode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_zipj_bls_ZIPJBLSJNI_delete_1ChainCode(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  bls::ChainCode *arg1 = (bls::ChainCode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(bls::ChainCode **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return ; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return ; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return ; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return ; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return ; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_org_zipj_bls_ZIPJBLSJNI_G1Element_1SIZE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  result = (long)bls::G1Element::SIZE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_new_1G1Element_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  bls::G1Element *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (bls::G1Element *)new bls::G1Element();
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(bls::G1Element **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_G1Element_1fromBytes_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jbyteArray jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  SwigValueWrapper< bls::Bytes > arg1 ;
  bool arg2 ;
  bls::G1Element result;
  
  (void)jenv;
  (void)jcls;
  
  Bytes arg1_bytesObject((const uint8_t *)jenv->GetByteArrayElements(jarg1, 0), jenv->GetArrayLength(jarg1));
  arg1 = arg1_bytesObject;
  
  arg2 = jarg2 ? true : false; 
  {
    try {
      result = bls::G1Element::FromBytes(arg1,arg2);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(bls::G1Element **)&jresult = new bls::G1Element((const bls::G1Element &)result); 
  {
    jenv->ReleaseByteArrayElements(jarg1, (jbyte *) (&arg1)->begin(), 0);
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_G1Element_1fromBytes_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jbyteArray jarg1) {
  jlong jresult = 0 ;
  SwigValueWrapper< bls::Bytes > arg1 ;
  bls::G1Element result;
  
  (void)jenv;
  (void)jcls;
  
  Bytes arg1_bytesObject((const uint8_t *)jenv->GetByteArrayElements(jarg1, 0), jenv->GetArrayLength(jarg1));
  arg1 = arg1_bytesObject;
  
  {
    try {
      result = bls::G1Element::FromBytes(arg1);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(bls::G1Element **)&jresult = new bls::G1Element((const bls::G1Element &)result); 
  {
    jenv->ReleaseByteArrayElements(jarg1, (jbyte *) (&arg1)->begin(), 0);
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_G1Element_1fromBytesUnchecked_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jbyteArray jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  SwigValueWrapper< bls::Bytes > arg1 ;
  bool arg2 ;
  bls::G1Element result;
  
  (void)jenv;
  (void)jcls;
  
  Bytes arg1_bytesObject((const uint8_t *)jenv->GetByteArrayElements(jarg1, 0), jenv->GetArrayLength(jarg1));
  arg1 = arg1_bytesObject;
  
  arg2 = jarg2 ? true : false; 
  {
    try {
      result = bls::G1Element::FromBytesUnchecked(arg1,arg2);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(bls::G1Element **)&jresult = new bls::G1Element((const bls::G1Element &)result); 
  {
    jenv->ReleaseByteArrayElements(jarg1, (jbyte *) (&arg1)->begin(), 0);
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_G1Element_1fromBytesUnchecked_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jbyteArray jarg1) {
  jlong jresult = 0 ;
  SwigValueWrapper< bls::Bytes > arg1 ;
  bls::G1Element result;
  
  (void)jenv;
  (void)jcls;
  
  Bytes arg1_bytesObject((const uint8_t *)jenv->GetByteArrayElements(jarg1, 0), jenv->GetArrayLength(jarg1));
  arg1 = arg1_bytesObject;
  
  {
    try {
      result = bls::G1Element::FromBytesUnchecked(arg1);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(bls::G1Element **)&jresult = new bls::G1Element((const bls::G1Element &)result); 
  {
    jenv->ReleaseByteArrayElements(jarg1, (jbyte *) (&arg1)->begin(), 0);
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_G1Element_1fromMessage(JNIEnv *jenv, jclass jcls, jbyteArray jarg1, jbyteArray jarg2, jint jarg3) {
  jlong jresult = 0 ;
  SwigValueWrapper< bls::Bytes > arg1 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  int arg3 ;
  bls::G1Element result;
  
  (void)jenv;
  (void)jcls;
  
  Bytes arg1_bytesObject((const uint8_t *)jenv->GetByteArrayElements(jarg1, 0), jenv->GetArrayLength(jarg1));
  arg1 = arg1_bytesObject;
  
  {
    arg2 = (unsigned char *) jenv->GetByteArrayElements(jarg2, 0);
  }
  arg3 = (int)jarg3; 
  {
    try {
      result = bls::G1Element::FromMessage(arg1,(unsigned char const *)arg2,arg3);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(bls::G1Element **)&jresult = new bls::G1Element((const bls::G1Element &)result); 
  {
    jenv->ReleaseByteArrayElements(jarg1, (jbyte *) (&arg1)->begin(), 0);
  }
  {
    jenv->ReleaseByteArrayElements(jarg2, (jbyte *) arg2, 0);
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_G1Element_1generator(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  bls::G1Element result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = bls::G1Element::Generator();
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(bls::G1Element **)&jresult = new bls::G1Element((const bls::G1Element &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_zipj_bls_ZIPJBLSJNI_G1Element_1isValid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  bls::G1Element *arg1 = (bls::G1Element *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::G1Element **)&jarg1; 
  {
    try {
      result = (bool)((bls::G1Element const *)arg1)->IsValid();
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_zipj_bls_ZIPJBLSJNI_G1Element_1checkValid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  bls::G1Element *arg1 = (bls::G1Element *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::G1Element **)&jarg1; 
  {
    try {
      ((bls::G1Element const *)arg1)->CheckValid();
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return ; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return ; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return ; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return ; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return ; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_G1Element_1negate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  bls::G1Element *arg1 = (bls::G1Element *) 0 ;
  bls::G1Element result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::G1Element **)&jarg1; 
  {
    try {
      result = ((bls::G1Element const *)arg1)->Negate();
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(bls::G1Element **)&jresult = new bls::G1Element((const bls::G1Element &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_G1Element_1pair(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  bls::G1Element *arg1 = (bls::G1Element *) 0 ;
  bls::G2Element *arg2 = 0 ;
  SwigValueWrapper< bls::GTElement > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(bls::G1Element **)&jarg1; 
  arg2 = *(bls::G2Element **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bls::G2Element const & reference is null");
    return 0;
  } 
  {
    try {
      result = ((bls::G1Element const *)arg1)->Pair((bls::G2Element const &)*arg2);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(bls::GTElement **)&jresult = new bls::GTElement((const bls::GTElement &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_G1Element_1getFingerprint_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  bls::G1Element *arg1 = (bls::G1Element *) 0 ;
  bool arg2 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::G1Element **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      result = (uint32_t)((bls::G1Element const *)arg1)->GetFingerprint(arg2);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_G1Element_1getFingerprint_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  bls::G1Element *arg1 = (bls::G1Element *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::G1Element **)&jarg1; 
  {
    try {
      result = (uint32_t)((bls::G1Element const *)arg1)->GetFingerprint();
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jbyteArray JNICALL Java_org_zipj_bls_ZIPJBLSJNI_G1Element_1serialize_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jbyteArray jresult = 0 ;
  bls::G1Element *arg1 = (bls::G1Element *) 0 ;
  bool arg2 ;
  std::vector< uint8_t > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::G1Element **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      result = ((bls::G1Element const *)arg1)->Serialize(arg2);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  {
    const jsize sz = (&result)->size();
    jresult = jenv->NewByteArray(sz);
    jenv->SetByteArrayRegion(jresult, 0, sz, reinterpret_cast<jbyte *>((&result)->data()));
  }
  return jresult;
}


SWIGEXPORT jbyteArray JNICALL Java_org_zipj_bls_ZIPJBLSJNI_G1Element_1serialize_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jbyteArray jresult = 0 ;
  bls::G1Element *arg1 = (bls::G1Element *) 0 ;
  std::vector< uint8_t > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::G1Element **)&jarg1; 
  {
    try {
      result = ((bls::G1Element const *)arg1)->Serialize();
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  {
    const jsize sz = (&result)->size();
    jresult = jenv->NewByteArray(sz);
    jenv->SetByteArrayRegion(jresult, 0, sz, reinterpret_cast<jbyte *>((&result)->data()));
  }
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_zipj_bls_ZIPJBLSJNI_objectEquals_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  bls::G1Element *arg1 = 0 ;
  bls::G1Element *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(bls::G1Element **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bls::G1Element const & reference is null");
    return 0;
  } 
  arg2 = *(bls::G1Element **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bls::G1Element const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)operator ==((bls::G1Element const &)*arg1,(bls::G1Element const &)*arg2);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_add_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  bls::G1Element *arg1 = 0 ;
  bls::G1Element *arg2 = 0 ;
  bls::G1Element result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(bls::G1Element **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bls::G1Element const & reference is null");
    return 0;
  } 
  arg2 = *(bls::G1Element **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bls::G1Element const & reference is null");
    return 0;
  } 
  {
    try {
      result = operator +((bls::G1Element const &)*arg1,(bls::G1Element const &)*arg2);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(bls::G1Element **)&jresult = new bls::G1Element((const bls::G1Element &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_andOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  bls::G1Element *arg1 = 0 ;
  bls::G2Element *arg2 = 0 ;
  SwigValueWrapper< bls::GTElement > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(bls::G1Element **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bls::G1Element const & reference is null");
    return 0;
  } 
  arg2 = *(bls::G2Element **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bls::G2Element const & reference is null");
    return 0;
  } 
  {
    try {
      result = operator &((bls::G1Element const &)*arg1,(bls::G2Element const &)*arg2);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(bls::GTElement **)&jresult = new bls::GTElement((const bls::GTElement &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_new_1G1Element_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  bls::G1Element *arg1 = 0 ;
  bls::G1Element *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::G1Element **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bls::G1Element const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bls::G1Element *)new bls::G1Element((bls::G1Element const &)*arg1);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(bls::G1Element **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_zipj_bls_ZIPJBLSJNI_delete_1G1Element(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  bls::G1Element *arg1 = (bls::G1Element *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(bls::G1Element **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return ; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return ; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return ; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return ; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return ; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_org_zipj_bls_ZIPJBLSJNI_G2Element_1SIZE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  result = (long)bls::G2Element::SIZE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_new_1G2Element_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  bls::G2Element *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (bls::G2Element *)new bls::G2Element();
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(bls::G2Element **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_G2Element_1fromBytes_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jbyteArray jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  SwigValueWrapper< bls::Bytes > arg1 ;
  bool arg2 ;
  bls::G2Element result;
  
  (void)jenv;
  (void)jcls;
  
  Bytes arg1_bytesObject((const uint8_t *)jenv->GetByteArrayElements(jarg1, 0), jenv->GetArrayLength(jarg1));
  arg1 = arg1_bytesObject;
  
  arg2 = jarg2 ? true : false; 
  {
    try {
      result = bls::G2Element::FromBytes(arg1,arg2);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(bls::G2Element **)&jresult = new bls::G2Element((const bls::G2Element &)result); 
  {
    jenv->ReleaseByteArrayElements(jarg1, (jbyte *) (&arg1)->begin(), 0);
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_G2Element_1fromBytes_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jbyteArray jarg1) {
  jlong jresult = 0 ;
  SwigValueWrapper< bls::Bytes > arg1 ;
  bls::G2Element result;
  
  (void)jenv;
  (void)jcls;
  
  Bytes arg1_bytesObject((const uint8_t *)jenv->GetByteArrayElements(jarg1, 0), jenv->GetArrayLength(jarg1));
  arg1 = arg1_bytesObject;
  
  {
    try {
      result = bls::G2Element::FromBytes(arg1);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(bls::G2Element **)&jresult = new bls::G2Element((const bls::G2Element &)result); 
  {
    jenv->ReleaseByteArrayElements(jarg1, (jbyte *) (&arg1)->begin(), 0);
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_G2Element_1fromBytesUnchecked_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jbyteArray jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  SwigValueWrapper< bls::Bytes > arg1 ;
  bool arg2 ;
  bls::G2Element result;
  
  (void)jenv;
  (void)jcls;
  
  Bytes arg1_bytesObject((const uint8_t *)jenv->GetByteArrayElements(jarg1, 0), jenv->GetArrayLength(jarg1));
  arg1 = arg1_bytesObject;
  
  arg2 = jarg2 ? true : false; 
  {
    try {
      result = bls::G2Element::FromBytesUnchecked(arg1,arg2);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(bls::G2Element **)&jresult = new bls::G2Element((const bls::G2Element &)result); 
  {
    jenv->ReleaseByteArrayElements(jarg1, (jbyte *) (&arg1)->begin(), 0);
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_G2Element_1fromBytesUnchecked_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jbyteArray jarg1) {
  jlong jresult = 0 ;
  SwigValueWrapper< bls::Bytes > arg1 ;
  bls::G2Element result;
  
  (void)jenv;
  (void)jcls;
  
  Bytes arg1_bytesObject((const uint8_t *)jenv->GetByteArrayElements(jarg1, 0), jenv->GetArrayLength(jarg1));
  arg1 = arg1_bytesObject;
  
  {
    try {
      result = bls::G2Element::FromBytesUnchecked(arg1);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(bls::G2Element **)&jresult = new bls::G2Element((const bls::G2Element &)result); 
  {
    jenv->ReleaseByteArrayElements(jarg1, (jbyte *) (&arg1)->begin(), 0);
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_G2Element_1fromMessage_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jbyteArray jarg1, jbyteArray jarg2, jint jarg3, jboolean jarg4) {
  jlong jresult = 0 ;
  SwigValueWrapper< bls::Bytes > arg1 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  int arg3 ;
  bool arg4 ;
  bls::G2Element result;
  
  (void)jenv;
  (void)jcls;
  
  Bytes arg1_bytesObject((const uint8_t *)jenv->GetByteArrayElements(jarg1, 0), jenv->GetArrayLength(jarg1));
  arg1 = arg1_bytesObject;
  
  {
    arg2 = (unsigned char *) jenv->GetByteArrayElements(jarg2, 0);
  }
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  {
    try {
      result = bls::G2Element::FromMessage(arg1,(unsigned char const *)arg2,arg3,arg4);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(bls::G2Element **)&jresult = new bls::G2Element((const bls::G2Element &)result); 
  {
    jenv->ReleaseByteArrayElements(jarg1, (jbyte *) (&arg1)->begin(), 0);
  }
  {
    jenv->ReleaseByteArrayElements(jarg2, (jbyte *) arg2, 0);
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_G2Element_1fromMessage_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jbyteArray jarg1, jbyteArray jarg2, jint jarg3) {
  jlong jresult = 0 ;
  SwigValueWrapper< bls::Bytes > arg1 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  int arg3 ;
  bls::G2Element result;
  
  (void)jenv;
  (void)jcls;
  
  Bytes arg1_bytesObject((const uint8_t *)jenv->GetByteArrayElements(jarg1, 0), jenv->GetArrayLength(jarg1));
  arg1 = arg1_bytesObject;
  
  {
    arg2 = (unsigned char *) jenv->GetByteArrayElements(jarg2, 0);
  }
  arg3 = (int)jarg3; 
  {
    try {
      result = bls::G2Element::FromMessage(arg1,(unsigned char const *)arg2,arg3);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(bls::G2Element **)&jresult = new bls::G2Element((const bls::G2Element &)result); 
  {
    jenv->ReleaseByteArrayElements(jarg1, (jbyte *) (&arg1)->begin(), 0);
  }
  {
    jenv->ReleaseByteArrayElements(jarg2, (jbyte *) arg2, 0);
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_G2Element_1generator(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  bls::G2Element result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = bls::G2Element::Generator();
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(bls::G2Element **)&jresult = new bls::G2Element((const bls::G2Element &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_zipj_bls_ZIPJBLSJNI_G2Element_1isValid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  bls::G2Element *arg1 = (bls::G2Element *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::G2Element **)&jarg1; 
  {
    try {
      result = (bool)((bls::G2Element const *)arg1)->IsValid();
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_zipj_bls_ZIPJBLSJNI_G2Element_1checkValid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  bls::G2Element *arg1 = (bls::G2Element *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::G2Element **)&jarg1; 
  {
    try {
      ((bls::G2Element const *)arg1)->CheckValid();
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return ; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return ; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return ; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return ; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return ; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_G2Element_1negate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  bls::G2Element *arg1 = (bls::G2Element *) 0 ;
  bls::G2Element result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::G2Element **)&jarg1; 
  {
    try {
      result = ((bls::G2Element const *)arg1)->Negate();
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(bls::G2Element **)&jresult = new bls::G2Element((const bls::G2Element &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_G2Element_1pair(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  bls::G2Element *arg1 = (bls::G2Element *) 0 ;
  bls::G1Element *arg2 = 0 ;
  SwigValueWrapper< bls::GTElement > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(bls::G2Element **)&jarg1; 
  arg2 = *(bls::G1Element **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bls::G1Element const & reference is null");
    return 0;
  } 
  {
    try {
      result = ((bls::G2Element const *)arg1)->Pair((bls::G1Element const &)*arg2);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(bls::GTElement **)&jresult = new bls::GTElement((const bls::GTElement &)result); 
  return jresult;
}


SWIGEXPORT jbyteArray JNICALL Java_org_zipj_bls_ZIPJBLSJNI_G2Element_1serialize_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jbyteArray jresult = 0 ;
  bls::G2Element *arg1 = (bls::G2Element *) 0 ;
  bool arg2 ;
  std::vector< uint8_t > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::G2Element **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      result = ((bls::G2Element const *)arg1)->Serialize(arg2);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  {
    const jsize sz = (&result)->size();
    jresult = jenv->NewByteArray(sz);
    jenv->SetByteArrayRegion(jresult, 0, sz, reinterpret_cast<jbyte *>((&result)->data()));
  }
  return jresult;
}


SWIGEXPORT jbyteArray JNICALL Java_org_zipj_bls_ZIPJBLSJNI_G2Element_1serialize_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jbyteArray jresult = 0 ;
  bls::G2Element *arg1 = (bls::G2Element *) 0 ;
  std::vector< uint8_t > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::G2Element **)&jarg1; 
  {
    try {
      result = ((bls::G2Element const *)arg1)->Serialize();
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  {
    const jsize sz = (&result)->size();
    jresult = jenv->NewByteArray(sz);
    jenv->SetByteArrayRegion(jresult, 0, sz, reinterpret_cast<jbyte *>((&result)->data()));
  }
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_zipj_bls_ZIPJBLSJNI_objectEquals_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  bls::G2Element *arg1 = 0 ;
  bls::G2Element *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(bls::G2Element **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bls::G2Element const & reference is null");
    return 0;
  } 
  arg2 = *(bls::G2Element **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bls::G2Element const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)operator ==((bls::G2Element const &)*arg1,(bls::G2Element const &)*arg2);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_add_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  bls::G2Element *arg1 = 0 ;
  bls::G2Element *arg2 = 0 ;
  bls::G2Element result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(bls::G2Element **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bls::G2Element const & reference is null");
    return 0;
  } 
  arg2 = *(bls::G2Element **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bls::G2Element const & reference is null");
    return 0;
  } 
  {
    try {
      result = operator +((bls::G2Element const &)*arg1,(bls::G2Element const &)*arg2);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(bls::G2Element **)&jresult = new bls::G2Element((const bls::G2Element &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_new_1G2Element_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  bls::G2Element *arg1 = 0 ;
  bls::G2Element *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::G2Element **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bls::G2Element const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bls::G2Element *)new bls::G2Element((bls::G2Element const &)*arg1);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(bls::G2Element **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_zipj_bls_ZIPJBLSJNI_delete_1G2Element(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  bls::G2Element *arg1 = (bls::G2Element *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(bls::G2Element **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return ; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return ; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return ; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return ; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return ; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_org_zipj_bls_ZIPJBLSJNI_GTElement_1SIZE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  result = (long)bls::GTElement::SIZE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_GTElement_1fromBytes(JNIEnv *jenv, jclass jcls, jbyteArray jarg1) {
  jlong jresult = 0 ;
  SwigValueWrapper< bls::Bytes > arg1 ;
  SwigValueWrapper< bls::GTElement > result;
  
  (void)jenv;
  (void)jcls;
  
  Bytes arg1_bytesObject((const uint8_t *)jenv->GetByteArrayElements(jarg1, 0), jenv->GetArrayLength(jarg1));
  arg1 = arg1_bytesObject;
  
  {
    try {
      result = bls::GTElement::FromBytes(arg1);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(bls::GTElement **)&jresult = new bls::GTElement((const bls::GTElement &)result); 
  {
    jenv->ReleaseByteArrayElements(jarg1, (jbyte *) (&arg1)->begin(), 0);
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_GTElement_1fromBytesUnchecked(JNIEnv *jenv, jclass jcls, jbyteArray jarg1) {
  jlong jresult = 0 ;
  SwigValueWrapper< bls::Bytes > arg1 ;
  SwigValueWrapper< bls::GTElement > result;
  
  (void)jenv;
  (void)jcls;
  
  Bytes arg1_bytesObject((const uint8_t *)jenv->GetByteArrayElements(jarg1, 0), jenv->GetArrayLength(jarg1));
  arg1 = arg1_bytesObject;
  
  {
    try {
      result = bls::GTElement::FromBytesUnchecked(arg1);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(bls::GTElement **)&jresult = new bls::GTElement((const bls::GTElement &)result); 
  {
    jenv->ReleaseByteArrayElements(jarg1, (jbyte *) (&arg1)->begin(), 0);
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_GTElement_1unity(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SwigValueWrapper< bls::GTElement > result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = bls::GTElement::Unity();
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(bls::GTElement **)&jresult = new bls::GTElement((const bls::GTElement &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_zipj_bls_ZIPJBLSJNI_GTElement_1serialize_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2) {
  bls::GTElement *arg1 = (bls::GTElement *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::GTElement **)&jarg1; 
  {
    arg2 = (unsigned char *) jenv->GetByteArrayElements(jarg2, 0);
  }
  {
    try {
      ((bls::GTElement const *)arg1)->Serialize(arg2);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return ; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return ; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return ; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return ; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return ; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
  {
    jenv->ReleaseByteArrayElements(jarg2, (jbyte *) arg2, 0);
  }
  
}


SWIGEXPORT jbyteArray JNICALL Java_org_zipj_bls_ZIPJBLSJNI_GTElement_1serialize_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jbyteArray jresult = 0 ;
  bls::GTElement *arg1 = (bls::GTElement *) 0 ;
  std::vector< uint8_t > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::GTElement **)&jarg1; 
  {
    try {
      result = ((bls::GTElement const *)arg1)->Serialize();
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  {
    const jsize sz = (&result)->size();
    jresult = jenv->NewByteArray(sz);
    jenv->SetByteArrayRegion(jresult, 0, sz, reinterpret_cast<jbyte *>((&result)->data()));
  }
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_zipj_bls_ZIPJBLSJNI_objectEquals_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  bls::GTElement *arg1 = 0 ;
  bls::GTElement *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(bls::GTElement **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bls::GTElement const & reference is null");
    return 0;
  } 
  arg2 = *(bls::GTElement **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bls::GTElement const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)operator ==((bls::GTElement const &)*arg1,(bls::GTElement const &)*arg2);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_multiply_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  bls::GTElement *arg1 = 0 ;
  bls::GTElement *arg2 = 0 ;
  SwigValueWrapper< bls::GTElement > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(bls::GTElement **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bls::GTElement & reference is null");
    return 0;
  } 
  arg2 = *(bls::GTElement **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bls::GTElement & reference is null");
    return 0;
  } 
  {
    try {
      result = operator *(*arg1,*arg2);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(bls::GTElement **)&jresult = new bls::GTElement((const bls::GTElement &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_zipj_bls_ZIPJBLSJNI_delete_1GTElement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  bls::GTElement *arg1 = (bls::GTElement *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(bls::GTElement **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return ; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return ; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return ; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return ; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return ; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_org_zipj_bls_ZIPJBLSJNI_PrivateKey_1PRIVATE_1KEY_1SIZE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  result = (long)bls::PrivateKey::PRIVATE_KEY_SIZE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_PrivateKey_1fromSeedBIP32(JNIEnv *jenv, jclass jcls, jbyteArray jarg1) {
  jlong jresult = 0 ;
  bls::Bytes *arg1 = 0 ;
  bls::PrivateKey result;
  
  (void)jenv;
  (void)jcls;
  
  Bytes arg1_bytesObject((const uint8_t *)jenv->GetByteArrayElements(jarg1, 0), jenv->GetArrayLength(jarg1));
  arg1 = &arg1_bytesObject;
  
  {
    try {
      result = bls::PrivateKey::FromSeedBIP32((bls::Bytes const &)*arg1);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(bls::PrivateKey **)&jresult = new bls::PrivateKey((const bls::PrivateKey &)result); 
  {
    jenv->ReleaseByteArrayElements(jarg1, (jbyte *) arg1->begin(), 0);
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_PrivateKey_1randomPrivateKey(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  bls::PrivateKey result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = bls::PrivateKey::RandomPrivateKey();
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(bls::PrivateKey **)&jresult = new bls::PrivateKey((const bls::PrivateKey &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_PrivateKey_1fromBytes_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jbyteArray jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  bls::Bytes *arg1 = 0 ;
  bool arg2 ;
  bls::PrivateKey result;
  
  (void)jenv;
  (void)jcls;
  
  Bytes arg1_bytesObject((const uint8_t *)jenv->GetByteArrayElements(jarg1, 0), jenv->GetArrayLength(jarg1));
  arg1 = &arg1_bytesObject;
  
  arg2 = jarg2 ? true : false; 
  {
    try {
      result = bls::PrivateKey::FromBytes((bls::Bytes const &)*arg1,arg2);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(bls::PrivateKey **)&jresult = new bls::PrivateKey((const bls::PrivateKey &)result); 
  {
    jenv->ReleaseByteArrayElements(jarg1, (jbyte *) arg1->begin(), 0);
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_PrivateKey_1fromBytes_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jbyteArray jarg1) {
  jlong jresult = 0 ;
  bls::Bytes *arg1 = 0 ;
  bls::PrivateKey result;
  
  (void)jenv;
  (void)jcls;
  
  Bytes arg1_bytesObject((const uint8_t *)jenv->GetByteArrayElements(jarg1, 0), jenv->GetArrayLength(jarg1));
  arg1 = &arg1_bytesObject;
  
  {
    try {
      result = bls::PrivateKey::FromBytes((bls::Bytes const &)*arg1);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(bls::PrivateKey **)&jresult = new bls::PrivateKey((const bls::PrivateKey &)result); 
  {
    jenv->ReleaseByteArrayElements(jarg1, (jbyte *) arg1->begin(), 0);
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_PrivateKey_1aggregate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< bls::PrivateKey > *arg1 = 0 ;
  bls::PrivateKey result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bls::PrivateKey > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< bls::PrivateKey > const & reference is null");
    return 0;
  } 
  {
    try {
      result = bls::PrivateKey::Aggregate((std::vector< bls::PrivateKey > const &)*arg1);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(bls::PrivateKey **)&jresult = new bls::PrivateKey((const bls::PrivateKey &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_new_1PrivateKey_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  bls::PrivateKey *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (bls::PrivateKey *)new bls::PrivateKey();
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(bls::PrivateKey **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_new_1PrivateKey_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  bls::PrivateKey *arg1 = 0 ;
  bls::PrivateKey *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::PrivateKey **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bls::PrivateKey const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bls::PrivateKey *)new bls::PrivateKey((bls::PrivateKey const &)*arg1);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(bls::PrivateKey **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_zipj_bls_ZIPJBLSJNI_delete_1PrivateKey(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  bls::PrivateKey *arg1 = (bls::PrivateKey *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(bls::PrivateKey **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return ; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return ; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return ; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return ; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return ; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_PrivateKey_1getG1Element(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  bls::PrivateKey *arg1 = (bls::PrivateKey *) 0 ;
  bls::G1Element *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::PrivateKey **)&jarg1; 
  {
    try {
      result = (bls::G1Element *) &((bls::PrivateKey const *)arg1)->GetG1Element();
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(bls::G1Element **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_PrivateKey_1getG2Element(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  bls::PrivateKey *arg1 = (bls::PrivateKey *) 0 ;
  bls::G2Element *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::PrivateKey **)&jarg1; 
  {
    try {
      result = (bls::G2Element *) &((bls::PrivateKey const *)arg1)->GetG2Element();
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(bls::G2Element **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_PrivateKey_1getG2Power(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  bls::PrivateKey *arg1 = (bls::PrivateKey *) 0 ;
  bls::G2Element *arg2 = 0 ;
  bls::G2Element result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(bls::PrivateKey **)&jarg1; 
  arg2 = *(bls::G2Element **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bls::G2Element const & reference is null");
    return 0;
  } 
  {
    try {
      result = ((bls::PrivateKey const *)arg1)->GetG2Power((bls::G2Element const &)*arg2);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(bls::G2Element **)&jresult = new bls::G2Element((const bls::G2Element &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_zipj_bls_ZIPJBLSJNI_PrivateKey_1isZero(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  bls::PrivateKey *arg1 = (bls::PrivateKey *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::PrivateKey **)&jarg1; 
  {
    try {
      result = (bool)((bls::PrivateKey const *)arg1)->IsZero();
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_zipj_bls_ZIPJBLSJNI_objectEquals_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  bls::PrivateKey *arg1 = 0 ;
  bls::PrivateKey *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(bls::PrivateKey **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bls::PrivateKey const & reference is null");
    return 0;
  } 
  arg2 = *(bls::PrivateKey **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bls::PrivateKey const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)operator ==((bls::PrivateKey const &)*arg1,(bls::PrivateKey const &)*arg2);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_multiply_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  bls::G1Element *arg1 = 0 ;
  bls::PrivateKey *arg2 = 0 ;
  bls::G1Element result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(bls::G1Element **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bls::G1Element const & reference is null");
    return 0;
  } 
  arg2 = *(bls::PrivateKey **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bls::PrivateKey const & reference is null");
    return 0;
  } 
  {
    try {
      result = operator *((bls::G1Element const &)*arg1,(bls::PrivateKey const &)*arg2);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(bls::G1Element **)&jresult = new bls::G1Element((const bls::G1Element &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_multiply_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  bls::PrivateKey *arg1 = 0 ;
  bls::G1Element *arg2 = 0 ;
  bls::G1Element result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(bls::PrivateKey **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bls::PrivateKey const & reference is null");
    return 0;
  } 
  arg2 = *(bls::G1Element **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bls::G1Element const & reference is null");
    return 0;
  } 
  {
    try {
      result = operator *((bls::PrivateKey const &)*arg1,(bls::G1Element const &)*arg2);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(bls::G1Element **)&jresult = new bls::G1Element((const bls::G1Element &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_multiply_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  bls::G2Element *arg1 = 0 ;
  bls::PrivateKey *arg2 = 0 ;
  bls::G2Element result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(bls::G2Element **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bls::G2Element const & reference is null");
    return 0;
  } 
  arg2 = *(bls::PrivateKey **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bls::PrivateKey const & reference is null");
    return 0;
  } 
  {
    try {
      result = operator *((bls::G2Element const &)*arg1,(bls::PrivateKey const &)*arg2);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(bls::G2Element **)&jresult = new bls::G2Element((const bls::G2Element &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_multiply_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  bls::PrivateKey *arg1 = 0 ;
  bls::G2Element *arg2 = 0 ;
  bls::G2Element result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(bls::PrivateKey **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bls::PrivateKey const & reference is null");
    return 0;
  } 
  arg2 = *(bls::G2Element **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bls::G2Element const & reference is null");
    return 0;
  } 
  {
    try {
      result = operator *((bls::PrivateKey const &)*arg1,(bls::G2Element const &)*arg2);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(bls::G2Element **)&jresult = new bls::G2Element((const bls::G2Element &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_zipj_bls_ZIPJBLSJNI_PrivateKey_1serialize_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2) {
  bls::PrivateKey *arg1 = (bls::PrivateKey *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::PrivateKey **)&jarg1; 
  {
    arg2 = (unsigned char *) jenv->GetByteArrayElements(jarg2, 0);
  }
  {
    try {
      ((bls::PrivateKey const *)arg1)->Serialize(arg2);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return ; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return ; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return ; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return ; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return ; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
  {
    jenv->ReleaseByteArrayElements(jarg2, (jbyte *) arg2, 0);
  }
  
}


SWIGEXPORT jbyteArray JNICALL Java_org_zipj_bls_ZIPJBLSJNI_PrivateKey_1serialize_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jbyteArray jresult = 0 ;
  bls::PrivateKey *arg1 = (bls::PrivateKey *) 0 ;
  bool arg2 ;
  std::vector< uint8_t > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::PrivateKey **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      result = ((bls::PrivateKey const *)arg1)->Serialize(arg2);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  {
    const jsize sz = (&result)->size();
    jresult = jenv->NewByteArray(sz);
    jenv->SetByteArrayRegion(jresult, 0, sz, reinterpret_cast<jbyte *>((&result)->data()));
  }
  return jresult;
}


SWIGEXPORT jbyteArray JNICALL Java_org_zipj_bls_ZIPJBLSJNI_PrivateKey_1serialize_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jbyteArray jresult = 0 ;
  bls::PrivateKey *arg1 = (bls::PrivateKey *) 0 ;
  std::vector< uint8_t > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::PrivateKey **)&jarg1; 
  {
    try {
      result = ((bls::PrivateKey const *)arg1)->Serialize();
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  {
    const jsize sz = (&result)->size();
    jresult = jenv->NewByteArray(sz);
    jenv->SetByteArrayRegion(jresult, 0, sz, reinterpret_cast<jbyte *>((&result)->data()));
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_PrivateKey_1signG2_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jlong jarg3, jbyteArray jarg4, jlong jarg5, jboolean jarg6) {
  jlong jresult = 0 ;
  bls::PrivateKey *arg1 = (bls::PrivateKey *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  size_t arg3 ;
  uint8_t *arg4 = (uint8_t *) 0 ;
  size_t arg5 ;
  bool arg6 ;
  bls::G2Element result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::PrivateKey **)&jarg1; 
  {
    arg2 = (unsigned char *) jenv->GetByteArrayElements(jarg2, 0);
  }
  arg3 = (size_t)jarg3; 
  {
    arg4 = (unsigned char *) jenv->GetByteArrayElements(jarg4, 0);
  }
  arg5 = (size_t)jarg5; 
  arg6 = jarg6 ? true : false; 
  {
    try {
      result = ((bls::PrivateKey const *)arg1)->SignG2((uint8_t const *)arg2,arg3,(uint8_t const *)arg4,arg5,arg6);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(bls::G2Element **)&jresult = new bls::G2Element((const bls::G2Element &)result); 
  {
    jenv->ReleaseByteArrayElements(jarg2, (jbyte *) arg2, 0);
  }
  {
    jenv->ReleaseByteArrayElements(jarg4, (jbyte *) arg4, 0);
  }
  
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_PrivateKey_1signG2_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jlong jarg3, jbyteArray jarg4, jlong jarg5) {
  jlong jresult = 0 ;
  bls::PrivateKey *arg1 = (bls::PrivateKey *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  size_t arg3 ;
  uint8_t *arg4 = (uint8_t *) 0 ;
  size_t arg5 ;
  bls::G2Element result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::PrivateKey **)&jarg1; 
  {
    arg2 = (unsigned char *) jenv->GetByteArrayElements(jarg2, 0);
  }
  arg3 = (size_t)jarg3; 
  {
    arg4 = (unsigned char *) jenv->GetByteArrayElements(jarg4, 0);
  }
  arg5 = (size_t)jarg5; 
  {
    try {
      result = ((bls::PrivateKey const *)arg1)->SignG2((uint8_t const *)arg2,arg3,(uint8_t const *)arg4,arg5);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(bls::G2Element **)&jresult = new bls::G2Element((const bls::G2Element &)result); 
  {
    jenv->ReleaseByteArrayElements(jarg2, (jbyte *) arg2, 0);
  }
  {
    jenv->ReleaseByteArrayElements(jarg4, (jbyte *) arg4, 0);
  }
  
  
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_zipj_bls_ZIPJBLSJNI_PrivateKey_1hasKeyData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  bls::PrivateKey *arg1 = (bls::PrivateKey *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::PrivateKey **)&jarg1; 
  {
    try {
      result = (bool)((bls::PrivateKey const *)arg1)->HasKeyData();
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_ExtendedPublicKey_1VERSION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)bls::ExtendedPublicKey::VERSION;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_ExtendedPublicKey_1SIZE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)bls::ExtendedPublicKey::SIZE;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_ExtendedPublicKey_1fromBytes_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jbyteArray jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  bls::Bytes *arg1 = 0 ;
  bool arg2 ;
  bls::ExtendedPublicKey result;
  
  (void)jenv;
  (void)jcls;
  
  Bytes arg1_bytesObject((const uint8_t *)jenv->GetByteArrayElements(jarg1, 0), jenv->GetArrayLength(jarg1));
  arg1 = &arg1_bytesObject;
  
  arg2 = jarg2 ? true : false; 
  {
    try {
      result = bls::ExtendedPublicKey::FromBytes((bls::Bytes const &)*arg1,arg2);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(bls::ExtendedPublicKey **)&jresult = new bls::ExtendedPublicKey((const bls::ExtendedPublicKey &)result); 
  {
    jenv->ReleaseByteArrayElements(jarg1, (jbyte *) arg1->begin(), 0);
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_ExtendedPublicKey_1fromBytes_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jbyteArray jarg1) {
  jlong jresult = 0 ;
  bls::Bytes *arg1 = 0 ;
  bls::ExtendedPublicKey result;
  
  (void)jenv;
  (void)jcls;
  
  Bytes arg1_bytesObject((const uint8_t *)jenv->GetByteArrayElements(jarg1, 0), jenv->GetArrayLength(jarg1));
  arg1 = &arg1_bytesObject;
  
  {
    try {
      result = bls::ExtendedPublicKey::FromBytes((bls::Bytes const &)*arg1);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(bls::ExtendedPublicKey **)&jresult = new bls::ExtendedPublicKey((const bls::ExtendedPublicKey &)result); 
  {
    jenv->ReleaseByteArrayElements(jarg1, (jbyte *) arg1->begin(), 0);
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_ExtendedPublicKey_1publicChild_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  bls::ExtendedPublicKey *arg1 = (bls::ExtendedPublicKey *) 0 ;
  uint32_t arg2 ;
  bool arg3 ;
  bls::ExtendedPublicKey result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::ExtendedPublicKey **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      result = ((bls::ExtendedPublicKey const *)arg1)->PublicChild(arg2,arg3);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(bls::ExtendedPublicKey **)&jresult = new bls::ExtendedPublicKey((const bls::ExtendedPublicKey &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_ExtendedPublicKey_1publicChild_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  bls::ExtendedPublicKey *arg1 = (bls::ExtendedPublicKey *) 0 ;
  uint32_t arg2 ;
  bls::ExtendedPublicKey result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::ExtendedPublicKey **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  {
    try {
      result = ((bls::ExtendedPublicKey const *)arg1)->PublicChild(arg2);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(bls::ExtendedPublicKey **)&jresult = new bls::ExtendedPublicKey((const bls::ExtendedPublicKey &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_ExtendedPublicKey_1getVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  bls::ExtendedPublicKey *arg1 = (bls::ExtendedPublicKey *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::ExtendedPublicKey **)&jarg1; 
  {
    try {
      result = (uint32_t)((bls::ExtendedPublicKey const *)arg1)->GetVersion();
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_org_zipj_bls_ZIPJBLSJNI_ExtendedPublicKey_1getDepth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  bls::ExtendedPublicKey *arg1 = (bls::ExtendedPublicKey *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::ExtendedPublicKey **)&jarg1; 
  {
    try {
      result = (uint8_t)((bls::ExtendedPublicKey const *)arg1)->GetDepth();
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_ExtendedPublicKey_1getParentFingerprint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  bls::ExtendedPublicKey *arg1 = (bls::ExtendedPublicKey *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::ExtendedPublicKey **)&jarg1; 
  {
    try {
      result = (uint32_t)((bls::ExtendedPublicKey const *)arg1)->GetParentFingerprint();
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_ExtendedPublicKey_1getChildNumber(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  bls::ExtendedPublicKey *arg1 = (bls::ExtendedPublicKey *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::ExtendedPublicKey **)&jarg1; 
  {
    try {
      result = (uint32_t)((bls::ExtendedPublicKey const *)arg1)->GetChildNumber();
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_ExtendedPublicKey_1getChainCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  bls::ExtendedPublicKey *arg1 = (bls::ExtendedPublicKey *) 0 ;
  bls::ChainCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::ExtendedPublicKey **)&jarg1; 
  {
    try {
      result = ((bls::ExtendedPublicKey const *)arg1)->GetChainCode();
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(bls::ChainCode **)&jresult = new bls::ChainCode((const bls::ChainCode &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_ExtendedPublicKey_1getPublicKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  bls::ExtendedPublicKey *arg1 = (bls::ExtendedPublicKey *) 0 ;
  bls::G1Element result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::ExtendedPublicKey **)&jarg1; 
  {
    try {
      result = ((bls::ExtendedPublicKey const *)arg1)->GetPublicKey();
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(bls::G1Element **)&jresult = new bls::G1Element((const bls::G1Element &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_zipj_bls_ZIPJBLSJNI_objectEquals_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  bls::ExtendedPublicKey *arg1 = 0 ;
  bls::ExtendedPublicKey *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(bls::ExtendedPublicKey **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bls::ExtendedPublicKey const & reference is null");
    return 0;
  } 
  arg2 = *(bls::ExtendedPublicKey **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bls::ExtendedPublicKey const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)operator ==((bls::ExtendedPublicKey const &)*arg1,(bls::ExtendedPublicKey const &)*arg2);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_zipj_bls_ZIPJBLSJNI_ExtendedPublicKey_1serialize_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jboolean jarg3) {
  bls::ExtendedPublicKey *arg1 = (bls::ExtendedPublicKey *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::ExtendedPublicKey **)&jarg1; 
  {
    arg2 = (unsigned char *) jenv->GetByteArrayElements(jarg2, 0);
  }
  arg3 = jarg3 ? true : false; 
  {
    try {
      ((bls::ExtendedPublicKey const *)arg1)->Serialize(arg2,arg3);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return ; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return ; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return ; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return ; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return ; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
  {
    jenv->ReleaseByteArrayElements(jarg2, (jbyte *) arg2, 0);
  }
  
}


SWIGEXPORT void JNICALL Java_org_zipj_bls_ZIPJBLSJNI_ExtendedPublicKey_1serialize_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2) {
  bls::ExtendedPublicKey *arg1 = (bls::ExtendedPublicKey *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::ExtendedPublicKey **)&jarg1; 
  {
    arg2 = (unsigned char *) jenv->GetByteArrayElements(jarg2, 0);
  }
  {
    try {
      ((bls::ExtendedPublicKey const *)arg1)->Serialize(arg2);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return ; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return ; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return ; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return ; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return ; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
  {
    jenv->ReleaseByteArrayElements(jarg2, (jbyte *) arg2, 0);
  }
  
}


SWIGEXPORT jbyteArray JNICALL Java_org_zipj_bls_ZIPJBLSJNI_ExtendedPublicKey_1serialize_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jbyteArray jresult = 0 ;
  bls::ExtendedPublicKey *arg1 = (bls::ExtendedPublicKey *) 0 ;
  bool arg2 ;
  std::vector< uint8_t > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::ExtendedPublicKey **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      result = ((bls::ExtendedPublicKey const *)arg1)->Serialize(arg2);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  {
    const jsize sz = (&result)->size();
    jresult = jenv->NewByteArray(sz);
    jenv->SetByteArrayRegion(jresult, 0, sz, reinterpret_cast<jbyte *>((&result)->data()));
  }
  return jresult;
}


SWIGEXPORT jbyteArray JNICALL Java_org_zipj_bls_ZIPJBLSJNI_ExtendedPublicKey_1serialize_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jbyteArray jresult = 0 ;
  bls::ExtendedPublicKey *arg1 = (bls::ExtendedPublicKey *) 0 ;
  std::vector< uint8_t > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::ExtendedPublicKey **)&jarg1; 
  {
    try {
      result = ((bls::ExtendedPublicKey const *)arg1)->Serialize();
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  {
    const jsize sz = (&result)->size();
    jresult = jenv->NewByteArray(sz);
    jenv->SetByteArrayRegion(jresult, 0, sz, reinterpret_cast<jbyte *>((&result)->data()));
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_new_1ExtendedPublicKey(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  bls::ExtendedPublicKey *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (bls::ExtendedPublicKey *)new bls::ExtendedPublicKey();
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(bls::ExtendedPublicKey **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_zipj_bls_ZIPJBLSJNI_delete_1ExtendedPublicKey(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  bls::ExtendedPublicKey *arg1 = (bls::ExtendedPublicKey *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(bls::ExtendedPublicKey **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return ; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return ; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return ; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return ; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return ; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_ExtendedPrivateKey_1SIZE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)bls::ExtendedPrivateKey::SIZE;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_ExtendedPrivateKey_1fromSeed(JNIEnv *jenv, jclass jcls, jbyteArray jarg1) {
  jlong jresult = 0 ;
  bls::Bytes *arg1 = 0 ;
  bls::ExtendedPrivateKey result;
  
  (void)jenv;
  (void)jcls;
  
  Bytes arg1_bytesObject((const uint8_t *)jenv->GetByteArrayElements(jarg1, 0), jenv->GetArrayLength(jarg1));
  arg1 = &arg1_bytesObject;
  
  {
    try {
      result = bls::ExtendedPrivateKey::FromSeed((bls::Bytes const &)*arg1);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(bls::ExtendedPrivateKey **)&jresult = new bls::ExtendedPrivateKey((const bls::ExtendedPrivateKey &)result); 
  {
    jenv->ReleaseByteArrayElements(jarg1, (jbyte *) arg1->begin(), 0);
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_ExtendedPrivateKey_1fromBytes(JNIEnv *jenv, jclass jcls, jbyteArray jarg1) {
  jlong jresult = 0 ;
  bls::Bytes *arg1 = 0 ;
  bls::ExtendedPrivateKey result;
  
  (void)jenv;
  (void)jcls;
  
  Bytes arg1_bytesObject((const uint8_t *)jenv->GetByteArrayElements(jarg1, 0), jenv->GetArrayLength(jarg1));
  arg1 = &arg1_bytesObject;
  
  {
    try {
      result = bls::ExtendedPrivateKey::FromBytes((bls::Bytes const &)*arg1);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(bls::ExtendedPrivateKey **)&jresult = new bls::ExtendedPrivateKey((const bls::ExtendedPrivateKey &)result); 
  {
    jenv->ReleaseByteArrayElements(jarg1, (jbyte *) arg1->begin(), 0);
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_ExtendedPrivateKey_1privateChild_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  bls::ExtendedPrivateKey *arg1 = (bls::ExtendedPrivateKey *) 0 ;
  uint32_t arg2 ;
  bool arg3 ;
  bls::ExtendedPrivateKey result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::ExtendedPrivateKey **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      result = ((bls::ExtendedPrivateKey const *)arg1)->PrivateChild(arg2,arg3);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(bls::ExtendedPrivateKey **)&jresult = new bls::ExtendedPrivateKey((const bls::ExtendedPrivateKey &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_ExtendedPrivateKey_1privateChild_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  bls::ExtendedPrivateKey *arg1 = (bls::ExtendedPrivateKey *) 0 ;
  uint32_t arg2 ;
  bls::ExtendedPrivateKey result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::ExtendedPrivateKey **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  {
    try {
      result = ((bls::ExtendedPrivateKey const *)arg1)->PrivateChild(arg2);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(bls::ExtendedPrivateKey **)&jresult = new bls::ExtendedPrivateKey((const bls::ExtendedPrivateKey &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_ExtendedPrivateKey_1publicChild(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  bls::ExtendedPrivateKey *arg1 = (bls::ExtendedPrivateKey *) 0 ;
  uint32_t arg2 ;
  bls::ExtendedPublicKey result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::ExtendedPrivateKey **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  {
    try {
      result = ((bls::ExtendedPrivateKey const *)arg1)->PublicChild(arg2);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(bls::ExtendedPublicKey **)&jresult = new bls::ExtendedPublicKey((const bls::ExtendedPublicKey &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_ExtendedPrivateKey_1getVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  bls::ExtendedPrivateKey *arg1 = (bls::ExtendedPrivateKey *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::ExtendedPrivateKey **)&jarg1; 
  {
    try {
      result = (uint32_t)((bls::ExtendedPrivateKey const *)arg1)->GetVersion();
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_org_zipj_bls_ZIPJBLSJNI_ExtendedPrivateKey_1getDepth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  bls::ExtendedPrivateKey *arg1 = (bls::ExtendedPrivateKey *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::ExtendedPrivateKey **)&jarg1; 
  {
    try {
      result = (uint8_t)((bls::ExtendedPrivateKey const *)arg1)->GetDepth();
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_ExtendedPrivateKey_1getParentFingerprint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  bls::ExtendedPrivateKey *arg1 = (bls::ExtendedPrivateKey *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::ExtendedPrivateKey **)&jarg1; 
  {
    try {
      result = (uint32_t)((bls::ExtendedPrivateKey const *)arg1)->GetParentFingerprint();
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_ExtendedPrivateKey_1getChildNumber(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  bls::ExtendedPrivateKey *arg1 = (bls::ExtendedPrivateKey *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::ExtendedPrivateKey **)&jarg1; 
  {
    try {
      result = (uint32_t)((bls::ExtendedPrivateKey const *)arg1)->GetChildNumber();
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_ExtendedPrivateKey_1getChainCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  bls::ExtendedPrivateKey *arg1 = (bls::ExtendedPrivateKey *) 0 ;
  bls::ChainCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::ExtendedPrivateKey **)&jarg1; 
  {
    try {
      result = ((bls::ExtendedPrivateKey const *)arg1)->GetChainCode();
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(bls::ChainCode **)&jresult = new bls::ChainCode((const bls::ChainCode &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_ExtendedPrivateKey_1getPrivateKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  bls::ExtendedPrivateKey *arg1 = (bls::ExtendedPrivateKey *) 0 ;
  bls::PrivateKey result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::ExtendedPrivateKey **)&jarg1; 
  {
    try {
      result = ((bls::ExtendedPrivateKey const *)arg1)->GetPrivateKey();
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(bls::PrivateKey **)&jresult = new bls::PrivateKey((const bls::PrivateKey &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_ExtendedPrivateKey_1getPublicKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  bls::ExtendedPrivateKey *arg1 = (bls::ExtendedPrivateKey *) 0 ;
  bls::G1Element result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::ExtendedPrivateKey **)&jarg1; 
  {
    try {
      result = ((bls::ExtendedPrivateKey const *)arg1)->GetPublicKey();
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(bls::G1Element **)&jresult = new bls::G1Element((const bls::G1Element &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_ExtendedPrivateKey_1getExtendedPublicKey_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  bls::ExtendedPrivateKey *arg1 = (bls::ExtendedPrivateKey *) 0 ;
  bool arg2 ;
  bls::ExtendedPublicKey result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::ExtendedPrivateKey **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      result = ((bls::ExtendedPrivateKey const *)arg1)->GetExtendedPublicKey(arg2);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(bls::ExtendedPublicKey **)&jresult = new bls::ExtendedPublicKey((const bls::ExtendedPublicKey &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_ExtendedPrivateKey_1getExtendedPublicKey_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  bls::ExtendedPrivateKey *arg1 = (bls::ExtendedPrivateKey *) 0 ;
  bls::ExtendedPublicKey result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::ExtendedPrivateKey **)&jarg1; 
  {
    try {
      result = ((bls::ExtendedPrivateKey const *)arg1)->GetExtendedPublicKey();
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(bls::ExtendedPublicKey **)&jresult = new bls::ExtendedPublicKey((const bls::ExtendedPublicKey &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_zipj_bls_ZIPJBLSJNI_objectEquals_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  bls::ExtendedPrivateKey *arg1 = 0 ;
  bls::ExtendedPrivateKey *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(bls::ExtendedPrivateKey **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bls::ExtendedPrivateKey const & reference is null");
    return 0;
  } 
  arg2 = *(bls::ExtendedPrivateKey **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bls::ExtendedPrivateKey const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)operator ==((bls::ExtendedPrivateKey const &)*arg1,(bls::ExtendedPrivateKey const &)*arg2);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_zipj_bls_ZIPJBLSJNI_ExtendedPrivateKey_1serialize_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2) {
  bls::ExtendedPrivateKey *arg1 = (bls::ExtendedPrivateKey *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::ExtendedPrivateKey **)&jarg1; 
  {
    arg2 = (unsigned char *) jenv->GetByteArrayElements(jarg2, 0);
  }
  {
    try {
      ((bls::ExtendedPrivateKey const *)arg1)->Serialize(arg2);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return ; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return ; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return ; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return ; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return ; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
  {
    jenv->ReleaseByteArrayElements(jarg2, (jbyte *) arg2, 0);
  }
  
}


SWIGEXPORT jbyteArray JNICALL Java_org_zipj_bls_ZIPJBLSJNI_ExtendedPrivateKey_1serialize_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jbyteArray jresult = 0 ;
  bls::ExtendedPrivateKey *arg1 = (bls::ExtendedPrivateKey *) 0 ;
  std::vector< uint8_t > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::ExtendedPrivateKey **)&jarg1; 
  {
    try {
      result = ((bls::ExtendedPrivateKey const *)arg1)->Serialize();
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  {
    const jsize sz = (&result)->size();
    jresult = jenv->NewByteArray(sz);
    jenv->SetByteArrayRegion(jresult, 0, sz, reinterpret_cast<jbyte *>((&result)->data()));
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_zipj_bls_ZIPJBLSJNI_delete_1ExtendedPrivateKey(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  bls::ExtendedPrivateKey *arg1 = (bls::ExtendedPrivateKey *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(bls::ExtendedPrivateKey **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return ; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return ; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return ; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return ; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return ; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_new_1ExtendedPrivateKey(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  bls::ExtendedPrivateKey *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (bls::ExtendedPrivateKey *)new bls::ExtendedPrivateKey();
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(bls::ExtendedPrivateKey **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_org_zipj_bls_ZIPJBLSJNI_HDKeys_1HASH_1LEN_1get(JNIEnv *jenv, jclass jcls) {
  jshort jresult = 0 ;
  unsigned char result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned char)bls::HDKeys::HASH_LEN;
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_HDKeys_1keyGen(JNIEnv *jenv, jclass jcls, jbyteArray jarg1) {
  jlong jresult = 0 ;
  bls::Bytes *arg1 = 0 ;
  bls::PrivateKey result;
  
  (void)jenv;
  (void)jcls;
  
  Bytes arg1_bytesObject((const uint8_t *)jenv->GetByteArrayElements(jarg1, 0), jenv->GetArrayLength(jarg1));
  arg1 = &arg1_bytesObject;
  
  {
    try {
      result = bls::HDKeys::KeyGen((bls::Bytes const &)*arg1);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(bls::PrivateKey **)&jresult = new bls::PrivateKey((const bls::PrivateKey &)result); 
  {
    jenv->ReleaseByteArrayElements(jarg1, (jbyte *) arg1->begin(), 0);
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_zipj_bls_ZIPJBLSJNI_HDKeys_1iKMToLamportSk(JNIEnv *jenv, jclass jcls, jbyteArray jarg1, jbyteArray jarg2, jlong jarg3, jbyteArray jarg4, jlong jarg5) {
  uint8_t *arg1 = (uint8_t *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  size_t arg3 ;
  uint8_t *arg4 = (uint8_t *) 0 ;
  size_t arg5 ;
  
  (void)jenv;
  (void)jcls;
  {
    arg1 = (unsigned char *) jenv->GetByteArrayElements(jarg1, 0);
  }
  {
    arg2 = (unsigned char *) jenv->GetByteArrayElements(jarg2, 0);
  }
  arg3 = (size_t)jarg3; 
  {
    arg4 = (unsigned char *) jenv->GetByteArrayElements(jarg4, 0);
  }
  arg5 = (size_t)jarg5; 
  {
    try {
      bls::HDKeys::IKMToLamportSk(arg1,(unsigned char const *)arg2,arg3,(unsigned char const *)arg4,arg5);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return ; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return ; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return ; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return ; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return ; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
  {
    jenv->ReleaseByteArrayElements(jarg1, (jbyte *) arg1, 0);
  }
  {
    jenv->ReleaseByteArrayElements(jarg2, (jbyte *) arg2, 0);
  }
  {
    jenv->ReleaseByteArrayElements(jarg4, (jbyte *) arg4, 0);
  }
  
  
  
}


SWIGEXPORT void JNICALL Java_org_zipj_bls_ZIPJBLSJNI_HDKeys_1parentSkToLamportPK(JNIEnv *jenv, jclass jcls, jbyteArray jarg1, jlong jarg2, jobject jarg2_, jlong jarg3) {
  uint8_t *arg1 = (uint8_t *) 0 ;
  bls::PrivateKey *arg2 = 0 ;
  uint32_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  {
    arg1 = (unsigned char *) jenv->GetByteArrayElements(jarg1, 0);
  }
  arg2 = *(bls::PrivateKey **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bls::PrivateKey const & reference is null");
    return ;
  } 
  arg3 = (uint32_t)jarg3; 
  {
    try {
      bls::HDKeys::ParentSkToLamportPK(arg1,(bls::PrivateKey const &)*arg2,arg3);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return ; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return ; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return ; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return ; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return ; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
  {
    jenv->ReleaseByteArrayElements(jarg1, (jbyte *) arg1, 0);
  }
  
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_HDKeys_1deriveChildSk(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  bls::PrivateKey *arg1 = 0 ;
  uint32_t arg2 ;
  bls::PrivateKey result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::PrivateKey **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bls::PrivateKey const & reference is null");
    return 0;
  } 
  arg2 = (uint32_t)jarg2; 
  {
    try {
      result = bls::HDKeys::DeriveChildSk((bls::PrivateKey const &)*arg1,arg2);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(bls::PrivateKey **)&jresult = new bls::PrivateKey((const bls::PrivateKey &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_HDKeys_1deriveChildSkUnhardened(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  bls::PrivateKey *arg1 = 0 ;
  uint32_t arg2 ;
  bls::PrivateKey result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::PrivateKey **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bls::PrivateKey const & reference is null");
    return 0;
  } 
  arg2 = (uint32_t)jarg2; 
  {
    try {
      result = bls::HDKeys::DeriveChildSkUnhardened((bls::PrivateKey const &)*arg1,arg2);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(bls::PrivateKey **)&jresult = new bls::PrivateKey((const bls::PrivateKey &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_HDKeys_1deriveChildG1Unhardened(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  bls::G1Element *arg1 = 0 ;
  uint32_t arg2 ;
  bls::G1Element result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::G1Element **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bls::G1Element const & reference is null");
    return 0;
  } 
  arg2 = (uint32_t)jarg2; 
  {
    try {
      result = bls::HDKeys::DeriveChildG1Unhardened((bls::G1Element const &)*arg1,arg2);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(bls::G1Element **)&jresult = new bls::G1Element((const bls::G1Element &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_HDKeys_1deriveChildG2Unhardened(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  bls::G2Element *arg1 = 0 ;
  uint32_t arg2 ;
  bls::G2Element result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::G2Element **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bls::G2Element const & reference is null");
    return 0;
  } 
  arg2 = (uint32_t)jarg2; 
  {
    try {
      result = bls::HDKeys::DeriveChildG2Unhardened((bls::G2Element const &)*arg1,arg2);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(bls::G2Element **)&jresult = new bls::G2Element((const bls::G2Element &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_new_1HDKeys(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  bls::HDKeys *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (bls::HDKeys *)new bls::HDKeys();
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(bls::HDKeys **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_zipj_bls_ZIPJBLSJNI_delete_1HDKeys(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  bls::HDKeys *arg1 = (bls::HDKeys *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(bls::HDKeys **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return ; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return ; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return ; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return ; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return ; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jshort JNICALL Java_org_zipj_bls_ZIPJBLSJNI_HKDF256_1HASH_1LEN_1get(JNIEnv *jenv, jclass jcls) {
  jshort jresult = 0 ;
  unsigned char result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned char)bls::HKDF256::HASH_LEN;
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_zipj_bls_ZIPJBLSJNI_HKDF256_1extract(JNIEnv *jenv, jclass jcls, jbyteArray jarg1, jbyteArray jarg2, jlong jarg3, jbyteArray jarg4, jlong jarg5) {
  uint8_t *arg1 = (uint8_t *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  size_t arg3 ;
  uint8_t *arg4 = (uint8_t *) 0 ;
  size_t arg5 ;
  
  (void)jenv;
  (void)jcls;
  {
    arg1 = (unsigned char *) jenv->GetByteArrayElements(jarg1, 0);
  }
  {
    arg2 = (unsigned char *) jenv->GetByteArrayElements(jarg2, 0);
  }
  arg3 = (size_t)jarg3; 
  {
    arg4 = (unsigned char *) jenv->GetByteArrayElements(jarg4, 0);
  }
  arg5 = (size_t)jarg5; 
  {
    try {
      bls::HKDF256::Extract(arg1,(unsigned char const *)arg2,arg3,(unsigned char const *)arg4,arg5);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return ; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return ; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return ; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return ; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return ; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
  {
    jenv->ReleaseByteArrayElements(jarg1, (jbyte *) arg1, 0);
  }
  {
    jenv->ReleaseByteArrayElements(jarg2, (jbyte *) arg2, 0);
  }
  {
    jenv->ReleaseByteArrayElements(jarg4, (jbyte *) arg4, 0);
  }
  
  
  
}


SWIGEXPORT void JNICALL Java_org_zipj_bls_ZIPJBLSJNI_HKDF256_1expand(JNIEnv *jenv, jclass jcls, jbyteArray jarg1, jlong jarg2, jbyteArray jarg3, jbyteArray jarg4, jlong jarg5) {
  uint8_t *arg1 = (uint8_t *) 0 ;
  size_t arg2 ;
  uint8_t *arg3 = (uint8_t *) 0 ;
  uint8_t *arg4 = (uint8_t *) 0 ;
  size_t arg5 ;
  
  (void)jenv;
  (void)jcls;
  {
    arg1 = (unsigned char *) jenv->GetByteArrayElements(jarg1, 0);
  }
  arg2 = (size_t)jarg2; 
  {
    arg3 = (unsigned char *) jenv->GetByteArrayElements(jarg3, 0);
  }
  {
    arg4 = (unsigned char *) jenv->GetByteArrayElements(jarg4, 0);
  }
  arg5 = (size_t)jarg5; 
  {
    try {
      bls::HKDF256::Expand(arg1,arg2,(unsigned char const *)arg3,(unsigned char const *)arg4,arg5);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return ; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return ; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return ; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return ; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return ; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
  {
    jenv->ReleaseByteArrayElements(jarg1, (jbyte *) arg1, 0);
  }
  {
    jenv->ReleaseByteArrayElements(jarg3, (jbyte *) arg3, 0);
  }
  {
    jenv->ReleaseByteArrayElements(jarg4, (jbyte *) arg4, 0);
  }
  
  
  
}


SWIGEXPORT void JNICALL Java_org_zipj_bls_ZIPJBLSJNI_HKDF256_1extractExpand(JNIEnv *jenv, jclass jcls, jbyteArray jarg1, jlong jarg2, jbyteArray jarg3, jlong jarg4, jbyteArray jarg5, jlong jarg6, jbyteArray jarg7, jlong jarg8) {
  uint8_t *arg1 = (uint8_t *) 0 ;
  size_t arg2 ;
  uint8_t *arg3 = (uint8_t *) 0 ;
  size_t arg4 ;
  uint8_t *arg5 = (uint8_t *) 0 ;
  size_t arg6 ;
  uint8_t *arg7 = (uint8_t *) 0 ;
  size_t arg8 ;
  
  (void)jenv;
  (void)jcls;
  {
    arg1 = (unsigned char *) jenv->GetByteArrayElements(jarg1, 0);
  }
  arg2 = (size_t)jarg2; 
  {
    arg3 = (unsigned char *) jenv->GetByteArrayElements(jarg3, 0);
  }
  arg4 = (size_t)jarg4; 
  {
    arg5 = (unsigned char *) jenv->GetByteArrayElements(jarg5, 0);
  }
  arg6 = (size_t)jarg6; 
  {
    arg7 = (unsigned char *) jenv->GetByteArrayElements(jarg7, 0);
  }
  arg8 = (size_t)jarg8; 
  {
    try {
      bls::HKDF256::ExtractExpand(arg1,arg2,(unsigned char const *)arg3,arg4,(unsigned char const *)arg5,arg6,(unsigned char const *)arg7,arg8);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return ; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return ; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return ; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return ; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return ; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
  {
    jenv->ReleaseByteArrayElements(jarg1, (jbyte *) arg1, 0);
  }
  {
    jenv->ReleaseByteArrayElements(jarg3, (jbyte *) arg3, 0);
  }
  {
    jenv->ReleaseByteArrayElements(jarg5, (jbyte *) arg5, 0);
  }
  {
    jenv->ReleaseByteArrayElements(jarg7, (jbyte *) arg7, 0);
  }
  
  
  
  
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_new_1HKDF256(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  bls::HKDF256 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (bls::HKDF256 *)new bls::HKDF256();
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(bls::HKDF256 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_zipj_bls_ZIPJBLSJNI_delete_1HKDF256(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  bls::HKDF256 *arg1 = (bls::HKDF256 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(bls::HKDF256 **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return ; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return ; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return ; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return ; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return ; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_new_1CoreMPL(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  bls::CoreMPL *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = (bls::CoreMPL *)new bls::CoreMPL((std::string const &)*arg1);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(bls::CoreMPL **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_CoreMPL_1keyGen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2) {
  jlong jresult = 0 ;
  bls::CoreMPL *arg1 = (bls::CoreMPL *) 0 ;
  bls::Bytes *arg2 = 0 ;
  bls::PrivateKey result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::CoreMPL **)&jarg1; 
  
  Bytes arg2_bytesObject((const uint8_t *)jenv->GetByteArrayElements(jarg2, 0), jenv->GetArrayLength(jarg2));
  arg2 = &arg2_bytesObject;
  
  {
    try {
      result = (arg1)->KeyGen((bls::Bytes const &)*arg2);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(bls::PrivateKey **)&jresult = new bls::PrivateKey((const bls::PrivateKey &)result); 
  {
    jenv->ReleaseByteArrayElements(jarg2, (jbyte *) arg2->begin(), 0);
  }
  return jresult;
}


SWIGEXPORT jbyteArray JNICALL Java_org_zipj_bls_ZIPJBLSJNI_CoreMPL_1skToPk(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jbyteArray jresult = 0 ;
  bls::CoreMPL *arg1 = (bls::CoreMPL *) 0 ;
  bls::PrivateKey *arg2 = 0 ;
  vector< uint8_t > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(bls::CoreMPL **)&jarg1; 
  arg2 = *(bls::PrivateKey **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bls::PrivateKey const & reference is null");
    return 0;
  } 
  {
    try {
      result = (arg1)->SkToPk((bls::PrivateKey const &)*arg2);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  {
    const jsize sz = (&result)->size();
    jresult = jenv->NewByteArray(sz);
    jenv->SetByteArrayRegion(jresult, 0, sz, reinterpret_cast<jbyte *>((&result)->data()));
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_CoreMPL_1skToG1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  bls::CoreMPL *arg1 = (bls::CoreMPL *) 0 ;
  bls::PrivateKey *arg2 = 0 ;
  bls::G1Element result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(bls::CoreMPL **)&jarg1; 
  arg2 = *(bls::PrivateKey **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bls::PrivateKey const & reference is null");
    return 0;
  } 
  {
    try {
      result = (arg1)->SkToG1((bls::PrivateKey const &)*arg2);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(bls::G1Element **)&jresult = new bls::G1Element((const bls::G1Element &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_CoreMPL_1sign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jbyteArray jarg3) {
  jlong jresult = 0 ;
  bls::CoreMPL *arg1 = (bls::CoreMPL *) 0 ;
  bls::PrivateKey *arg2 = 0 ;
  bls::Bytes *arg3 = 0 ;
  bls::G2Element result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(bls::CoreMPL **)&jarg1; 
  arg2 = *(bls::PrivateKey **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bls::PrivateKey const & reference is null");
    return 0;
  } 
  
  Bytes arg3_bytesObject((const uint8_t *)jenv->GetByteArrayElements(jarg3, 0), jenv->GetArrayLength(jarg3));
  arg3 = &arg3_bytesObject;
  
  {
    try {
      result = (arg1)->Sign((bls::PrivateKey const &)*arg2,(bls::Bytes const &)*arg3);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(bls::G2Element **)&jresult = new bls::G2Element((const bls::G2Element &)result); 
  {
    jenv->ReleaseByteArrayElements(jarg3, (jbyte *) arg3->begin(), 0);
  }
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_zipj_bls_ZIPJBLSJNI_CoreMPL_1verify_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jbyteArray jarg3, jbyteArray jarg4) {
  jboolean jresult = 0 ;
  bls::CoreMPL *arg1 = (bls::CoreMPL *) 0 ;
  bls::Bytes *arg2 = 0 ;
  bls::Bytes *arg3 = 0 ;
  bls::Bytes *arg4 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::CoreMPL **)&jarg1; 
  
  Bytes arg2_bytesObject((const uint8_t *)jenv->GetByteArrayElements(jarg2, 0), jenv->GetArrayLength(jarg2));
  arg2 = &arg2_bytesObject;
  
  
  Bytes arg3_bytesObject((const uint8_t *)jenv->GetByteArrayElements(jarg3, 0), jenv->GetArrayLength(jarg3));
  arg3 = &arg3_bytesObject;
  
  
  Bytes arg4_bytesObject((const uint8_t *)jenv->GetByteArrayElements(jarg4, 0), jenv->GetArrayLength(jarg4));
  arg4 = &arg4_bytesObject;
  
  {
    try {
      result = (bool)(arg1)->Verify((bls::Bytes const &)*arg2,(bls::Bytes const &)*arg3,(bls::Bytes const &)*arg4);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  {
    jenv->ReleaseByteArrayElements(jarg2, (jbyte *) arg2->begin(), 0);
  }
  {
    jenv->ReleaseByteArrayElements(jarg3, (jbyte *) arg3->begin(), 0);
  }
  {
    jenv->ReleaseByteArrayElements(jarg4, (jbyte *) arg4->begin(), 0);
  }
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_zipj_bls_ZIPJBLSJNI_CoreMPL_1verify_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jbyteArray jarg3, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  bls::CoreMPL *arg1 = (bls::CoreMPL *) 0 ;
  bls::G1Element *arg2 = 0 ;
  bls::Bytes *arg3 = 0 ;
  bls::G2Element *arg4 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(bls::CoreMPL **)&jarg1; 
  arg2 = *(bls::G1Element **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bls::G1Element const & reference is null");
    return 0;
  } 
  
  Bytes arg3_bytesObject((const uint8_t *)jenv->GetByteArrayElements(jarg3, 0), jenv->GetArrayLength(jarg3));
  arg3 = &arg3_bytesObject;
  
  arg4 = *(bls::G2Element **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bls::G2Element const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->Verify((bls::G1Element const &)*arg2,(bls::Bytes const &)*arg3,(bls::G2Element const &)*arg4);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  {
    jenv->ReleaseByteArrayElements(jarg3, (jbyte *) arg3->begin(), 0);
  }
  return jresult;
}


SWIGEXPORT jbyteArray JNICALL Java_org_zipj_bls_ZIPJBLSJNI_CoreMPL_1aggregate_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jbyteArray jresult = 0 ;
  bls::CoreMPL *arg1 = (bls::CoreMPL *) 0 ;
  vector< vector< uint8_t > > *arg2 = 0 ;
  vector< uint8_t > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(bls::CoreMPL **)&jarg1; 
  arg2 = *(vector< vector< uint8_t > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "vector< vector< uint8_t > > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (arg1)->Aggregate((vector< vector< uint8_t > > const &)*arg2);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  {
    const jsize sz = (&result)->size();
    jresult = jenv->NewByteArray(sz);
    jenv->SetByteArrayRegion(jresult, 0, sz, reinterpret_cast<jbyte *>((&result)->data()));
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_CoreMPL_1aggregate_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  bls::CoreMPL *arg1 = (bls::CoreMPL *) 0 ;
  vector< bls::G2Element > *arg2 = 0 ;
  bls::G2Element result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(bls::CoreMPL **)&jarg1; 
  arg2 = *(vector< bls::G2Element > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "vector< bls::G2Element > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (arg1)->Aggregate((vector< bls::G2Element > const &)*arg2);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(bls::G2Element **)&jresult = new bls::G2Element((const bls::G2Element &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_CoreMPL_1aggregate_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  bls::CoreMPL *arg1 = (bls::CoreMPL *) 0 ;
  vector< bls::G1Element > *arg2 = 0 ;
  bls::G1Element result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(bls::CoreMPL **)&jarg1; 
  arg2 = *(vector< bls::G1Element > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "vector< bls::G1Element > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (arg1)->Aggregate((vector< bls::G1Element > const &)*arg2);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(bls::G1Element **)&jresult = new bls::G1Element((const bls::G1Element &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_CoreMPL_1aggregateSecure(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jbyteArray jarg4) {
  jlong jresult = 0 ;
  bls::CoreMPL *arg1 = (bls::CoreMPL *) 0 ;
  std::vector< bls::G1Element > *arg2 = 0 ;
  std::vector< bls::G2Element > *arg3 = 0 ;
  bls::Bytes *arg4 = 0 ;
  bls::G2Element result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(bls::CoreMPL **)&jarg1; 
  arg2 = *(std::vector< bls::G1Element > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< bls::G1Element > const & reference is null");
    return 0;
  } 
  arg3 = *(std::vector< bls::G2Element > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< bls::G2Element > const & reference is null");
    return 0;
  } 
  
  Bytes arg4_bytesObject((const uint8_t *)jenv->GetByteArrayElements(jarg4, 0), jenv->GetArrayLength(jarg4));
  arg4 = &arg4_bytesObject;
  
  {
    try {
      result = (arg1)->AggregateSecure((std::vector< bls::G1Element > const &)*arg2,(std::vector< bls::G2Element > const &)*arg3,(bls::Bytes const &)*arg4);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(bls::G2Element **)&jresult = new bls::G2Element((const bls::G2Element &)result); 
  {
    jenv->ReleaseByteArrayElements(jarg4, (jbyte *) arg4->begin(), 0);
  }
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_zipj_bls_ZIPJBLSJNI_CoreMPL_1verifySecure(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jbyteArray jarg4) {
  jboolean jresult = 0 ;
  bls::CoreMPL *arg1 = (bls::CoreMPL *) 0 ;
  std::vector< bls::G1Element > *arg2 = 0 ;
  bls::G2Element *arg3 = 0 ;
  bls::Bytes *arg4 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(bls::CoreMPL **)&jarg1; 
  arg2 = *(std::vector< bls::G1Element > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< bls::G1Element > const & reference is null");
    return 0;
  } 
  arg3 = *(bls::G2Element **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bls::G2Element const & reference is null");
    return 0;
  } 
  
  Bytes arg4_bytesObject((const uint8_t *)jenv->GetByteArrayElements(jarg4, 0), jenv->GetArrayLength(jarg4));
  arg4 = &arg4_bytesObject;
  
  {
    try {
      result = (bool)(arg1)->VerifySecure((std::vector< bls::G1Element > const &)*arg2,(bls::G2Element const &)*arg3,(bls::Bytes const &)*arg4);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  {
    jenv->ReleaseByteArrayElements(jarg4, (jbyte *) arg4->begin(), 0);
  }
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_zipj_bls_ZIPJBLSJNI_CoreMPL_1aggregateVerify_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jbyteArray jarg4) {
  jboolean jresult = 0 ;
  bls::CoreMPL *arg1 = (bls::CoreMPL *) 0 ;
  vector< vector< uint8_t > > *arg2 = 0 ;
  vector< vector< uint8_t > > *arg3 = 0 ;
  vector< uint8_t > *arg4 = 0 ;
  std::vector< uint8_t > vec4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(bls::CoreMPL **)&jarg1; 
  arg2 = *(vector< vector< uint8_t > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "vector< vector< uint8_t > > const & reference is null");
    return 0;
  } 
  arg3 = *(vector< vector< uint8_t > > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "vector< vector< uint8_t > > const & reference is null");
    return 0;
  } 
  {
    if (!jarg4) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    const jsize sz = jenv->GetArrayLength(jarg4);
    jbyte* const jarr = jenv->GetByteArrayElements(jarg4, 0);
    if (!jarr) return 0;
    vec4.assign(jarr, jarr+sz);
    jenv->ReleaseByteArrayElements(jarg4, jarr, JNI_ABORT);
    arg4 = &vec4;
  }
  {
    try {
      result = (bool)(arg1)->AggregateVerify((vector< vector< uint8_t > > const &)*arg2,(vector< vector< uint8_t > > const &)*arg3,(vector< uint8_t > const &)*arg4);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_zipj_bls_ZIPJBLSJNI_CoreMPL_1aggregateVerify_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  bls::CoreMPL *arg1 = (bls::CoreMPL *) 0 ;
  vector< bls::G1Element > *arg2 = 0 ;
  vector< vector< uint8_t > > *arg3 = 0 ;
  bls::G2Element *arg4 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(bls::CoreMPL **)&jarg1; 
  arg2 = *(vector< bls::G1Element > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "vector< bls::G1Element > const & reference is null");
    return 0;
  } 
  arg3 = *(vector< vector< uint8_t > > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "vector< vector< uint8_t > > const & reference is null");
    return 0;
  } 
  arg4 = *(bls::G2Element **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bls::G2Element const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->AggregateVerify((vector< bls::G1Element > const &)*arg2,(vector< vector< uint8_t > > const &)*arg3,(bls::G2Element const &)*arg4);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_CoreMPL_1deriveChildSk(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  bls::CoreMPL *arg1 = (bls::CoreMPL *) 0 ;
  bls::PrivateKey *arg2 = 0 ;
  uint32_t arg3 ;
  bls::PrivateKey result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(bls::CoreMPL **)&jarg1; 
  arg2 = *(bls::PrivateKey **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bls::PrivateKey const & reference is null");
    return 0;
  } 
  arg3 = (uint32_t)jarg3; 
  {
    try {
      result = (arg1)->DeriveChildSk((bls::PrivateKey const &)*arg2,arg3);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(bls::PrivateKey **)&jresult = new bls::PrivateKey((const bls::PrivateKey &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_CoreMPL_1deriveChildSkUnhardened(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  bls::CoreMPL *arg1 = (bls::CoreMPL *) 0 ;
  bls::PrivateKey *arg2 = 0 ;
  uint32_t arg3 ;
  bls::PrivateKey result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(bls::CoreMPL **)&jarg1; 
  arg2 = *(bls::PrivateKey **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bls::PrivateKey const & reference is null");
    return 0;
  } 
  arg3 = (uint32_t)jarg3; 
  {
    try {
      result = (arg1)->DeriveChildSkUnhardened((bls::PrivateKey const &)*arg2,arg3);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(bls::PrivateKey **)&jresult = new bls::PrivateKey((const bls::PrivateKey &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_CoreMPL_1deriveChildPkUnhardened(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  bls::CoreMPL *arg1 = (bls::CoreMPL *) 0 ;
  bls::G1Element *arg2 = 0 ;
  uint32_t arg3 ;
  bls::G1Element result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(bls::CoreMPL **)&jarg1; 
  arg2 = *(bls::G1Element **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bls::G1Element const & reference is null");
    return 0;
  } 
  arg3 = (uint32_t)jarg3; 
  {
    try {
      result = (arg1)->DeriveChildPkUnhardened((bls::G1Element const &)*arg2,arg3);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(bls::G1Element **)&jresult = new bls::G1Element((const bls::G1Element &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_zipj_bls_ZIPJBLSJNI_delete_1CoreMPL(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  bls::CoreMPL *arg1 = (bls::CoreMPL *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(bls::CoreMPL **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return ; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return ; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return ; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return ; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return ; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jstring JNICALL Java_org_zipj_bls_ZIPJBLSJNI_BasicSchemeMPL_1CIPHERSUITE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &bls::BasicSchemeMPL::CIPHERSUITE_ID;
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_new_1BasicSchemeMPL(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  bls::BasicSchemeMPL *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (bls::BasicSchemeMPL *)new bls::BasicSchemeMPL();
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(bls::BasicSchemeMPL **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_zipj_bls_ZIPJBLSJNI_BasicSchemeMPL_1aggregateVerify_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jbyteArray jarg4) {
  jboolean jresult = 0 ;
  bls::BasicSchemeMPL *arg1 = (bls::BasicSchemeMPL *) 0 ;
  vector< vector< uint8_t > > *arg2 = 0 ;
  vector< vector< uint8_t > > *arg3 = 0 ;
  vector< uint8_t > *arg4 = 0 ;
  std::vector< uint8_t > vec4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(bls::BasicSchemeMPL **)&jarg1; 
  arg2 = *(vector< vector< uint8_t > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "vector< vector< uint8_t > > const & reference is null");
    return 0;
  } 
  arg3 = *(vector< vector< uint8_t > > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "vector< vector< uint8_t > > const & reference is null");
    return 0;
  } 
  {
    if (!jarg4) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    const jsize sz = jenv->GetArrayLength(jarg4);
    jbyte* const jarr = jenv->GetByteArrayElements(jarg4, 0);
    if (!jarr) return 0;
    vec4.assign(jarr, jarr+sz);
    jenv->ReleaseByteArrayElements(jarg4, jarr, JNI_ABORT);
    arg4 = &vec4;
  }
  {
    try {
      result = (bool)(arg1)->AggregateVerify((vector< vector< uint8_t > > const &)*arg2,(vector< vector< uint8_t > > const &)*arg3,(vector< uint8_t > const &)*arg4);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_zipj_bls_ZIPJBLSJNI_BasicSchemeMPL_1aggregateVerify_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  bls::BasicSchemeMPL *arg1 = (bls::BasicSchemeMPL *) 0 ;
  vector< bls::G1Element > *arg2 = 0 ;
  vector< vector< uint8_t > > *arg3 = 0 ;
  bls::G2Element *arg4 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(bls::BasicSchemeMPL **)&jarg1; 
  arg2 = *(vector< bls::G1Element > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "vector< bls::G1Element > const & reference is null");
    return 0;
  } 
  arg3 = *(vector< vector< uint8_t > > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "vector< vector< uint8_t > > const & reference is null");
    return 0;
  } 
  arg4 = *(bls::G2Element **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bls::G2Element const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->AggregateVerify((vector< bls::G1Element > const &)*arg2,(vector< vector< uint8_t > > const &)*arg3,(bls::G2Element const &)*arg4);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_zipj_bls_ZIPJBLSJNI_delete_1BasicSchemeMPL(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  bls::BasicSchemeMPL *arg1 = (bls::BasicSchemeMPL *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(bls::BasicSchemeMPL **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return ; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return ; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return ; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return ; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return ; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jstring JNICALL Java_org_zipj_bls_ZIPJBLSJNI_AugSchemeMPL_1CIPHERSUITE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &bls::AugSchemeMPL::CIPHERSUITE_ID;
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_new_1AugSchemeMPL(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  bls::AugSchemeMPL *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (bls::AugSchemeMPL *)new bls::AugSchemeMPL();
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(bls::AugSchemeMPL **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_AugSchemeMPL_1sign_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jbyteArray jarg3) {
  jlong jresult = 0 ;
  bls::AugSchemeMPL *arg1 = (bls::AugSchemeMPL *) 0 ;
  bls::PrivateKey *arg2 = 0 ;
  bls::Bytes *arg3 = 0 ;
  bls::G2Element result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(bls::AugSchemeMPL **)&jarg1; 
  arg2 = *(bls::PrivateKey **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bls::PrivateKey const & reference is null");
    return 0;
  } 
  
  Bytes arg3_bytesObject((const uint8_t *)jenv->GetByteArrayElements(jarg3, 0), jenv->GetArrayLength(jarg3));
  arg3 = &arg3_bytesObject;
  
  {
    try {
      result = (arg1)->Sign((bls::PrivateKey const &)*arg2,(bls::Bytes const &)*arg3);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(bls::G2Element **)&jresult = new bls::G2Element((const bls::G2Element &)result); 
  {
    jenv->ReleaseByteArrayElements(jarg3, (jbyte *) arg3->begin(), 0);
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_AugSchemeMPL_1sign_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jbyteArray jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  bls::AugSchemeMPL *arg1 = (bls::AugSchemeMPL *) 0 ;
  bls::PrivateKey *arg2 = 0 ;
  bls::Bytes *arg3 = 0 ;
  bls::G1Element *arg4 = 0 ;
  bls::G2Element result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(bls::AugSchemeMPL **)&jarg1; 
  arg2 = *(bls::PrivateKey **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bls::PrivateKey const & reference is null");
    return 0;
  } 
  
  Bytes arg3_bytesObject((const uint8_t *)jenv->GetByteArrayElements(jarg3, 0), jenv->GetArrayLength(jarg3));
  arg3 = &arg3_bytesObject;
  
  arg4 = *(bls::G1Element **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bls::G1Element const & reference is null");
    return 0;
  } 
  {
    try {
      result = (arg1)->Sign((bls::PrivateKey const &)*arg2,(bls::Bytes const &)*arg3,(bls::G1Element const &)*arg4);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(bls::G2Element **)&jresult = new bls::G2Element((const bls::G2Element &)result); 
  {
    jenv->ReleaseByteArrayElements(jarg3, (jbyte *) arg3->begin(), 0);
  }
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_zipj_bls_ZIPJBLSJNI_AugSchemeMPL_1verify(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jbyteArray jarg3, jbyteArray jarg4) {
  jboolean jresult = 0 ;
  bls::AugSchemeMPL *arg1 = (bls::AugSchemeMPL *) 0 ;
  bls::Bytes *arg2 = 0 ;
  bls::Bytes *arg3 = 0 ;
  bls::Bytes *arg4 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::AugSchemeMPL **)&jarg1; 
  
  Bytes arg2_bytesObject((const uint8_t *)jenv->GetByteArrayElements(jarg2, 0), jenv->GetArrayLength(jarg2));
  arg2 = &arg2_bytesObject;
  
  
  Bytes arg3_bytesObject((const uint8_t *)jenv->GetByteArrayElements(jarg3, 0), jenv->GetArrayLength(jarg3));
  arg3 = &arg3_bytesObject;
  
  
  Bytes arg4_bytesObject((const uint8_t *)jenv->GetByteArrayElements(jarg4, 0), jenv->GetArrayLength(jarg4));
  arg4 = &arg4_bytesObject;
  
  {
    try {
      result = (bool)(arg1)->Verify((bls::Bytes const &)*arg2,(bls::Bytes const &)*arg3,(bls::Bytes const &)*arg4);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  {
    jenv->ReleaseByteArrayElements(jarg2, (jbyte *) arg2->begin(), 0);
  }
  {
    jenv->ReleaseByteArrayElements(jarg3, (jbyte *) arg3->begin(), 0);
  }
  {
    jenv->ReleaseByteArrayElements(jarg4, (jbyte *) arg4->begin(), 0);
  }
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_zipj_bls_ZIPJBLSJNI_AugSchemeMPL_1aggregateVerify_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jbyteArray jarg4) {
  jboolean jresult = 0 ;
  bls::AugSchemeMPL *arg1 = (bls::AugSchemeMPL *) 0 ;
  vector< vector< uint8_t > > *arg2 = 0 ;
  vector< vector< uint8_t > > *arg3 = 0 ;
  vector< uint8_t > *arg4 = 0 ;
  std::vector< uint8_t > vec4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(bls::AugSchemeMPL **)&jarg1; 
  arg2 = *(vector< vector< uint8_t > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "vector< vector< uint8_t > > const & reference is null");
    return 0;
  } 
  arg3 = *(vector< vector< uint8_t > > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "vector< vector< uint8_t > > const & reference is null");
    return 0;
  } 
  {
    if (!jarg4) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    const jsize sz = jenv->GetArrayLength(jarg4);
    jbyte* const jarr = jenv->GetByteArrayElements(jarg4, 0);
    if (!jarr) return 0;
    vec4.assign(jarr, jarr+sz);
    jenv->ReleaseByteArrayElements(jarg4, jarr, JNI_ABORT);
    arg4 = &vec4;
  }
  {
    try {
      result = (bool)(arg1)->AggregateVerify((vector< vector< uint8_t > > const &)*arg2,(vector< vector< uint8_t > > const &)*arg3,(vector< uint8_t > const &)*arg4);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_zipj_bls_ZIPJBLSJNI_AugSchemeMPL_1aggregateVerify_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  bls::AugSchemeMPL *arg1 = (bls::AugSchemeMPL *) 0 ;
  vector< bls::G1Element > *arg2 = 0 ;
  vector< vector< uint8_t > > *arg3 = 0 ;
  bls::G2Element *arg4 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(bls::AugSchemeMPL **)&jarg1; 
  arg2 = *(vector< bls::G1Element > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "vector< bls::G1Element > const & reference is null");
    return 0;
  } 
  arg3 = *(vector< vector< uint8_t > > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "vector< vector< uint8_t > > const & reference is null");
    return 0;
  } 
  arg4 = *(bls::G2Element **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bls::G2Element const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->AggregateVerify((vector< bls::G1Element > const &)*arg2,(vector< vector< uint8_t > > const &)*arg3,(bls::G2Element const &)*arg4);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_zipj_bls_ZIPJBLSJNI_delete_1AugSchemeMPL(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  bls::AugSchemeMPL *arg1 = (bls::AugSchemeMPL *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(bls::AugSchemeMPL **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return ; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return ; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return ; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return ; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return ; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jstring JNICALL Java_org_zipj_bls_ZIPJBLSJNI_PopSchemeMPL_1CIPHERSUITE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &bls::PopSchemeMPL::CIPHERSUITE_ID;
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_zipj_bls_ZIPJBLSJNI_PopSchemeMPL_1POP_1CIPHERSUITE_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &bls::PopSchemeMPL::POP_CIPHERSUITE_ID;
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_new_1PopSchemeMPL(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  bls::PopSchemeMPL *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (bls::PopSchemeMPL *)new bls::PopSchemeMPL();
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(bls::PopSchemeMPL **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_PopSchemeMPL_1popProve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  bls::PopSchemeMPL *arg1 = (bls::PopSchemeMPL *) 0 ;
  bls::PrivateKey *arg2 = 0 ;
  bls::G2Element result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(bls::PopSchemeMPL **)&jarg1; 
  arg2 = *(bls::PrivateKey **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bls::PrivateKey const & reference is null");
    return 0;
  } 
  {
    try {
      result = (arg1)->PopProve((bls::PrivateKey const &)*arg2);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(bls::G2Element **)&jresult = new bls::G2Element((const bls::G2Element &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_zipj_bls_ZIPJBLSJNI_PopSchemeMPL_1popVerify_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  bls::PopSchemeMPL *arg1 = (bls::PopSchemeMPL *) 0 ;
  bls::G1Element *arg2 = 0 ;
  bls::G2Element *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(bls::PopSchemeMPL **)&jarg1; 
  arg2 = *(bls::G1Element **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bls::G1Element const & reference is null");
    return 0;
  } 
  arg3 = *(bls::G2Element **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bls::G2Element const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->PopVerify((bls::G1Element const &)*arg2,(bls::G2Element const &)*arg3);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_zipj_bls_ZIPJBLSJNI_PopSchemeMPL_1popVerify_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jbyteArray jarg3) {
  jboolean jresult = 0 ;
  bls::PopSchemeMPL *arg1 = (bls::PopSchemeMPL *) 0 ;
  bls::Bytes *arg2 = 0 ;
  bls::Bytes *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::PopSchemeMPL **)&jarg1; 
  
  Bytes arg2_bytesObject((const uint8_t *)jenv->GetByteArrayElements(jarg2, 0), jenv->GetArrayLength(jarg2));
  arg2 = &arg2_bytesObject;
  
  
  Bytes arg3_bytesObject((const uint8_t *)jenv->GetByteArrayElements(jarg3, 0), jenv->GetArrayLength(jarg3));
  arg3 = &arg3_bytesObject;
  
  {
    try {
      result = (bool)(arg1)->PopVerify((bls::Bytes const &)*arg2,(bls::Bytes const &)*arg3);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  {
    jenv->ReleaseByteArrayElements(jarg2, (jbyte *) arg2->begin(), 0);
  }
  {
    jenv->ReleaseByteArrayElements(jarg3, (jbyte *) arg3->begin(), 0);
  }
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_zipj_bls_ZIPJBLSJNI_PopSchemeMPL_1fastAggregateVerify_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jbyteArray jarg3, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  bls::PopSchemeMPL *arg1 = (bls::PopSchemeMPL *) 0 ;
  vector< bls::G1Element > *arg2 = 0 ;
  bls::Bytes *arg3 = 0 ;
  bls::G2Element *arg4 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(bls::PopSchemeMPL **)&jarg1; 
  arg2 = *(vector< bls::G1Element > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "vector< bls::G1Element > const & reference is null");
    return 0;
  } 
  
  Bytes arg3_bytesObject((const uint8_t *)jenv->GetByteArrayElements(jarg3, 0), jenv->GetArrayLength(jarg3));
  arg3 = &arg3_bytesObject;
  
  arg4 = *(bls::G2Element **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bls::G2Element const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->FastAggregateVerify((vector< bls::G1Element > const &)*arg2,(bls::Bytes const &)*arg3,(bls::G2Element const &)*arg4);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  {
    jenv->ReleaseByteArrayElements(jarg3, (jbyte *) arg3->begin(), 0);
  }
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_zipj_bls_ZIPJBLSJNI_PopSchemeMPL_1fastAggregateVerify_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jbyteArray jarg3, jbyteArray jarg4) {
  jboolean jresult = 0 ;
  bls::PopSchemeMPL *arg1 = (bls::PopSchemeMPL *) 0 ;
  vector< vector< uint8_t > > *arg2 = 0 ;
  vector< uint8_t > *arg3 = 0 ;
  vector< uint8_t > *arg4 = 0 ;
  std::vector< uint8_t > vec3 ;
  std::vector< uint8_t > vec4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(bls::PopSchemeMPL **)&jarg1; 
  arg2 = *(vector< vector< uint8_t > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "vector< vector< uint8_t > > const & reference is null");
    return 0;
  } 
  {
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    const jsize sz = jenv->GetArrayLength(jarg3);
    jbyte* const jarr = jenv->GetByteArrayElements(jarg3, 0);
    if (!jarr) return 0;
    vec3.assign(jarr, jarr+sz);
    jenv->ReleaseByteArrayElements(jarg3, jarr, JNI_ABORT);
    arg3 = &vec3;
  }
  {
    if (!jarg4) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    const jsize sz = jenv->GetArrayLength(jarg4);
    jbyte* const jarr = jenv->GetByteArrayElements(jarg4, 0);
    if (!jarr) return 0;
    vec4.assign(jarr, jarr+sz);
    jenv->ReleaseByteArrayElements(jarg4, jarr, JNI_ABORT);
    arg4 = &vec4;
  }
  {
    try {
      result = (bool)(arg1)->FastAggregateVerify((vector< vector< uint8_t > > const &)*arg2,(vector< uint8_t > const &)*arg3,(vector< uint8_t > const &)*arg4);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_zipj_bls_ZIPJBLSJNI_delete_1PopSchemeMPL(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  bls::PopSchemeMPL *arg1 = (bls::PopSchemeMPL *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(bls::PopSchemeMPL **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return ; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return ; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return ; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return ; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return ; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_new_1LegacySchemeMPL(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  bls::LegacySchemeMPL *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (bls::LegacySchemeMPL *)new bls::LegacySchemeMPL();
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(bls::LegacySchemeMPL **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jbyteArray JNICALL Java_org_zipj_bls_ZIPJBLSJNI_LegacySchemeMPL_1skToPk(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jbyteArray jresult = 0 ;
  bls::LegacySchemeMPL *arg1 = (bls::LegacySchemeMPL *) 0 ;
  bls::PrivateKey *arg2 = 0 ;
  vector< uint8_t > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(bls::LegacySchemeMPL **)&jarg1; 
  arg2 = *(bls::PrivateKey **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bls::PrivateKey const & reference is null");
    return 0;
  } 
  {
    try {
      result = (arg1)->SkToPk((bls::PrivateKey const &)*arg2);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  {
    const jsize sz = (&result)->size();
    jresult = jenv->NewByteArray(sz);
    jenv->SetByteArrayRegion(jresult, 0, sz, reinterpret_cast<jbyte *>((&result)->data()));
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_LegacySchemeMPL_1sign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jbyteArray jarg3) {
  jlong jresult = 0 ;
  bls::LegacySchemeMPL *arg1 = (bls::LegacySchemeMPL *) 0 ;
  bls::PrivateKey *arg2 = 0 ;
  bls::Bytes *arg3 = 0 ;
  bls::G2Element result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(bls::LegacySchemeMPL **)&jarg1; 
  arg2 = *(bls::PrivateKey **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bls::PrivateKey const & reference is null");
    return 0;
  } 
  
  Bytes arg3_bytesObject((const uint8_t *)jenv->GetByteArrayElements(jarg3, 0), jenv->GetArrayLength(jarg3));
  arg3 = &arg3_bytesObject;
  
  {
    try {
      result = (arg1)->Sign((bls::PrivateKey const &)*arg2,(bls::Bytes const &)*arg3);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(bls::G2Element **)&jresult = new bls::G2Element((const bls::G2Element &)result); 
  {
    jenv->ReleaseByteArrayElements(jarg3, (jbyte *) arg3->begin(), 0);
  }
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_zipj_bls_ZIPJBLSJNI_LegacySchemeMPL_1verify(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jbyteArray jarg3, jbyteArray jarg4) {
  jboolean jresult = 0 ;
  bls::LegacySchemeMPL *arg1 = (bls::LegacySchemeMPL *) 0 ;
  bls::Bytes *arg2 = 0 ;
  bls::Bytes *arg3 = 0 ;
  bls::Bytes *arg4 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::LegacySchemeMPL **)&jarg1; 
  
  Bytes arg2_bytesObject((const uint8_t *)jenv->GetByteArrayElements(jarg2, 0), jenv->GetArrayLength(jarg2));
  arg2 = &arg2_bytesObject;
  
  
  Bytes arg3_bytesObject((const uint8_t *)jenv->GetByteArrayElements(jarg3, 0), jenv->GetArrayLength(jarg3));
  arg3 = &arg3_bytesObject;
  
  
  Bytes arg4_bytesObject((const uint8_t *)jenv->GetByteArrayElements(jarg4, 0), jenv->GetArrayLength(jarg4));
  arg4 = &arg4_bytesObject;
  
  {
    try {
      result = (bool)(arg1)->Verify((bls::Bytes const &)*arg2,(bls::Bytes const &)*arg3,(bls::Bytes const &)*arg4);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  {
    jenv->ReleaseByteArrayElements(jarg2, (jbyte *) arg2->begin(), 0);
  }
  {
    jenv->ReleaseByteArrayElements(jarg3, (jbyte *) arg3->begin(), 0);
  }
  {
    jenv->ReleaseByteArrayElements(jarg4, (jbyte *) arg4->begin(), 0);
  }
  return jresult;
}


SWIGEXPORT jbyteArray JNICALL Java_org_zipj_bls_ZIPJBLSJNI_LegacySchemeMPL_1aggregate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jbyteArray jresult = 0 ;
  bls::LegacySchemeMPL *arg1 = (bls::LegacySchemeMPL *) 0 ;
  vector< vector< uint8_t > > *arg2 = 0 ;
  vector< uint8_t > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(bls::LegacySchemeMPL **)&jarg1; 
  arg2 = *(vector< vector< uint8_t > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "vector< vector< uint8_t > > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (arg1)->Aggregate((vector< vector< uint8_t > > const &)*arg2);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  {
    const jsize sz = (&result)->size();
    jresult = jenv->NewByteArray(sz);
    jenv->SetByteArrayRegion(jresult, 0, sz, reinterpret_cast<jbyte *>((&result)->data()));
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_LegacySchemeMPL_1aggregateSecure(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jbyteArray jarg4) {
  jlong jresult = 0 ;
  bls::LegacySchemeMPL *arg1 = (bls::LegacySchemeMPL *) 0 ;
  std::vector< bls::G1Element > *arg2 = 0 ;
  std::vector< bls::G2Element > *arg3 = 0 ;
  bls::Bytes *arg4 = 0 ;
  bls::G2Element result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(bls::LegacySchemeMPL **)&jarg1; 
  arg2 = *(std::vector< bls::G1Element > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< bls::G1Element > const & reference is null");
    return 0;
  } 
  arg3 = *(std::vector< bls::G2Element > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< bls::G2Element > const & reference is null");
    return 0;
  } 
  
  Bytes arg4_bytesObject((const uint8_t *)jenv->GetByteArrayElements(jarg4, 0), jenv->GetArrayLength(jarg4));
  arg4 = &arg4_bytesObject;
  
  {
    try {
      result = (arg1)->AggregateSecure((std::vector< bls::G1Element > const &)*arg2,(std::vector< bls::G2Element > const &)*arg3,(bls::Bytes const &)*arg4);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(bls::G2Element **)&jresult = new bls::G2Element((const bls::G2Element &)result); 
  {
    jenv->ReleaseByteArrayElements(jarg4, (jbyte *) arg4->begin(), 0);
  }
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_zipj_bls_ZIPJBLSJNI_LegacySchemeMPL_1verifySecure(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jbyteArray jarg4) {
  jboolean jresult = 0 ;
  bls::LegacySchemeMPL *arg1 = (bls::LegacySchemeMPL *) 0 ;
  std::vector< bls::G1Element > *arg2 = 0 ;
  bls::G2Element *arg3 = 0 ;
  bls::Bytes *arg4 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(bls::LegacySchemeMPL **)&jarg1; 
  arg2 = *(std::vector< bls::G1Element > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< bls::G1Element > const & reference is null");
    return 0;
  } 
  arg3 = *(bls::G2Element **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bls::G2Element const & reference is null");
    return 0;
  } 
  
  Bytes arg4_bytesObject((const uint8_t *)jenv->GetByteArrayElements(jarg4, 0), jenv->GetArrayLength(jarg4));
  arg4 = &arg4_bytesObject;
  
  {
    try {
      result = (bool)(arg1)->VerifySecure((std::vector< bls::G1Element > const &)*arg2,(bls::G2Element const &)*arg3,(bls::Bytes const &)*arg4);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  {
    jenv->ReleaseByteArrayElements(jarg4, (jbyte *) arg4->begin(), 0);
  }
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_zipj_bls_ZIPJBLSJNI_LegacySchemeMPL_1aggregateVerify(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  bls::LegacySchemeMPL *arg1 = (bls::LegacySchemeMPL *) 0 ;
  vector< bls::G1Element > *arg2 = 0 ;
  vector< vector< uint8_t > > *arg3 = 0 ;
  bls::G2Element *arg4 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(bls::LegacySchemeMPL **)&jarg1; 
  arg2 = *(vector< bls::G1Element > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "vector< bls::G1Element > const & reference is null");
    return 0;
  } 
  arg3 = *(vector< vector< uint8_t > > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "vector< vector< uint8_t > > const & reference is null");
    return 0;
  } 
  arg4 = *(bls::G2Element **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bls::G2Element const & reference is null");
    return 0;
  } 
  result = (bool)bls_LegacySchemeMPL_aggregateVerify(arg1,(vector< bls::G1Element > const &)*arg2,(std::vector< std::vector< unsigned char > > const &)*arg3,(bls::G2Element const &)*arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_zipj_bls_ZIPJBLSJNI_delete_1LegacySchemeMPL(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  bls::LegacySchemeMPL *arg1 = (bls::LegacySchemeMPL *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(bls::LegacySchemeMPL **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return ; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return ; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return ; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return ; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return ; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_privateKeyShare(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2) {
  jlong jresult = 0 ;
  std::vector< bls::PrivateKey > *arg1 = 0 ;
  bls::Bytes *arg2 = 0 ;
  bls::PrivateKey result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bls::PrivateKey > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< bls::PrivateKey > const & reference is null");
    return 0;
  } 
  
  Bytes arg2_bytesObject((const uint8_t *)jenv->GetByteArrayElements(jarg2, 0), jenv->GetArrayLength(jarg2));
  arg2 = &arg2_bytesObject;
  
  {
    try {
      result = bls::Threshold::PrivateKeyShare((std::vector< bls::PrivateKey > const &)*arg1,(bls::Bytes const &)*arg2);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(bls::PrivateKey **)&jresult = new bls::PrivateKey((const bls::PrivateKey &)result); 
  {
    jenv->ReleaseByteArrayElements(jarg2, (jbyte *) arg2->begin(), 0);
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_publicKeyShare(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2) {
  jlong jresult = 0 ;
  std::vector< bls::G1Element > *arg1 = 0 ;
  bls::Bytes *arg2 = 0 ;
  bls::G1Element result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bls::G1Element > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< bls::G1Element > const & reference is null");
    return 0;
  } 
  
  Bytes arg2_bytesObject((const uint8_t *)jenv->GetByteArrayElements(jarg2, 0), jenv->GetArrayLength(jarg2));
  arg2 = &arg2_bytesObject;
  
  {
    try {
      result = bls::Threshold::PublicKeyShare((std::vector< bls::G1Element > const &)*arg1,(bls::Bytes const &)*arg2);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(bls::G1Element **)&jresult = new bls::G1Element((const bls::G1Element &)result); 
  {
    jenv->ReleaseByteArrayElements(jarg2, (jbyte *) arg2->begin(), 0);
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_signatureShare(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2) {
  jlong jresult = 0 ;
  std::vector< bls::G2Element > *arg1 = 0 ;
  bls::Bytes *arg2 = 0 ;
  bls::G2Element result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bls::G2Element > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< bls::G2Element > const & reference is null");
    return 0;
  } 
  
  Bytes arg2_bytesObject((const uint8_t *)jenv->GetByteArrayElements(jarg2, 0), jenv->GetArrayLength(jarg2));
  arg2 = &arg2_bytesObject;
  
  {
    try {
      result = bls::Threshold::SignatureShare((std::vector< bls::G2Element > const &)*arg1,(bls::Bytes const &)*arg2);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(bls::G2Element **)&jresult = new bls::G2Element((const bls::G2Element &)result); 
  {
    jenv->ReleaseByteArrayElements(jarg2, (jbyte *) arg2->begin(), 0);
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_sign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2) {
  jlong jresult = 0 ;
  bls::PrivateKey *arg1 = 0 ;
  bls::Bytes *arg2 = 0 ;
  bls::G2Element result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::PrivateKey **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bls::PrivateKey const & reference is null");
    return 0;
  } 
  
  Bytes arg2_bytesObject((const uint8_t *)jenv->GetByteArrayElements(jarg2, 0), jenv->GetArrayLength(jarg2));
  arg2 = &arg2_bytesObject;
  
  {
    try {
      result = bls::Threshold::Sign((bls::PrivateKey const &)*arg1,(bls::Bytes const &)*arg2);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(bls::G2Element **)&jresult = new bls::G2Element((const bls::G2Element &)result); 
  {
    jenv->ReleaseByteArrayElements(jarg2, (jbyte *) arg2->begin(), 0);
  }
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_zipj_bls_ZIPJBLSJNI_verify(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  bls::G1Element *arg1 = 0 ;
  bls::Bytes *arg2 = 0 ;
  bls::G2Element *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(bls::G1Element **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bls::G1Element const & reference is null");
    return 0;
  } 
  
  Bytes arg2_bytesObject((const uint8_t *)jenv->GetByteArrayElements(jarg2, 0), jenv->GetArrayLength(jarg2));
  arg2 = &arg2_bytesObject;
  
  arg3 = *(bls::G2Element **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bls::G2Element const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)bls::Threshold::Verify((bls::G1Element const &)*arg1,(bls::Bytes const &)*arg2,(bls::G2Element const &)*arg3);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  {
    jenv->ReleaseByteArrayElements(jarg2, (jbyte *) arg2->begin(), 0);
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_privateKeyRecover(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  std::vector< bls::PrivateKey > *arg1 = 0 ;
  std::vector< std::vector< uint8_t > > *arg2 = 0 ;
  bls::PrivateKey result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< bls::PrivateKey > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< bls::PrivateKey > const & reference is null");
    return 0;
  } 
  arg2 = *(std::vector< std::vector< uint8_t > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< uint8_t > > const & reference is null");
    return 0;
  } 
  {
    try {
      result = bls::Threshold::PrivateKeyRecover((std::vector< bls::PrivateKey > const &)*arg1,(std::vector< std::vector< unsigned char > > const &)*arg2);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(bls::PrivateKey **)&jresult = new bls::PrivateKey((const bls::PrivateKey &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_publicKeyRecover(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  std::vector< bls::G1Element > *arg1 = 0 ;
  std::vector< std::vector< uint8_t > > *arg2 = 0 ;
  bls::G1Element result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< bls::G1Element > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< bls::G1Element > const & reference is null");
    return 0;
  } 
  arg2 = *(std::vector< std::vector< uint8_t > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< uint8_t > > const & reference is null");
    return 0;
  } 
  {
    try {
      result = bls::Threshold::PublicKeyRecover((std::vector< bls::G1Element > const &)*arg1,(std::vector< std::vector< unsigned char > > const &)*arg2);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(bls::G1Element **)&jresult = new bls::G1Element((const bls::G1Element &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_signatureRecover(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  std::vector< bls::G2Element > *arg1 = 0 ;
  std::vector< std::vector< uint8_t > > *arg2 = 0 ;
  bls::G2Element result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< bls::G2Element > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< bls::G2Element > const & reference is null");
    return 0;
  } 
  arg2 = *(std::vector< std::vector< uint8_t > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< uint8_t > > const & reference is null");
    return 0;
  } 
  {
    try {
      result = bls::Threshold::SignatureRecover((std::vector< bls::G2Element > const &)*arg1,(std::vector< std::vector< unsigned char > > const &)*arg2);
    } catch(std::string x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.c_str()); return 0; 
      };
    } catch(std::runtime_error x) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, x.what()); return 0; 
      };
    } catch(std::invalid_argument x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::length_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::logic_error x) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, x.what()); return 0; 
      };
    } catch(std::exception x) {
      {
        SWIG_JavaException(jenv, SWIG_SystemError, x.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(bls::G2Element **)&jresult = new bls::G2Element((const bls::G2Element &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_BasicSchemeMPL_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(bls::CoreMPL **)&baseptr = *(bls::BasicSchemeMPL **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_AugSchemeMPL_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(bls::CoreMPL **)&baseptr = *(bls::AugSchemeMPL **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_PopSchemeMPL_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(bls::CoreMPL **)&baseptr = *(bls::PopSchemeMPL **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_zipj_bls_ZIPJBLSJNI_LegacySchemeMPL_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(bls::CoreMPL **)&baseptr = *(bls::LegacySchemeMPL **)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

