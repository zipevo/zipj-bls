/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.zipj.bls;

public class ZIPJBLSJNI {
  public final static native long new_Uint8Vector__SWIG_0();
  public final static native long new_Uint8Vector__SWIG_1(long jarg1, Uint8Vector jarg1_);
  public final static native int Uint8Vector_capacity(long jarg1, Uint8Vector jarg1_);
  public final static native void Uint8Vector_reserve(long jarg1, Uint8Vector jarg1_, int jarg2);
  public final static native boolean Uint8Vector_isEmpty(long jarg1, Uint8Vector jarg1_);
  public final static native void Uint8Vector_clear(long jarg1, Uint8Vector jarg1_);
  public final static native long new_Uint8Vector__SWIG_2(int jarg1, short jarg2);
  public final static native int Uint8Vector_doSize(long jarg1, Uint8Vector jarg1_);
  public final static native void Uint8Vector_doAdd__SWIG_0(long jarg1, Uint8Vector jarg1_, short jarg2);
  public final static native void Uint8Vector_doAdd__SWIG_1(long jarg1, Uint8Vector jarg1_, int jarg2, short jarg3);
  public final static native short Uint8Vector_doRemove(long jarg1, Uint8Vector jarg1_, int jarg2);
  public final static native short Uint8Vector_doGet(long jarg1, Uint8Vector jarg1_, int jarg2);
  public final static native short Uint8Vector_doSet(long jarg1, Uint8Vector jarg1_, int jarg2, short jarg3);
  public final static native void Uint8Vector_doRemoveRange(long jarg1, Uint8Vector jarg1_, int jarg2, int jarg3);
  public final static native void delete_Uint8Vector(long jarg1);
  public final static native long new_Uint8VectorVector__SWIG_0();
  public final static native long new_Uint8VectorVector__SWIG_1(long jarg1, Uint8VectorVector jarg1_);
  public final static native int Uint8VectorVector_capacity(long jarg1, Uint8VectorVector jarg1_);
  public final static native void Uint8VectorVector_reserve(long jarg1, Uint8VectorVector jarg1_, int jarg2);
  public final static native boolean Uint8VectorVector_isEmpty(long jarg1, Uint8VectorVector jarg1_);
  public final static native void Uint8VectorVector_clear(long jarg1, Uint8VectorVector jarg1_);
  public final static native long new_Uint8VectorVector__SWIG_2(int jarg1, long jarg2, Uint8Vector jarg2_);
  public final static native int Uint8VectorVector_doSize(long jarg1, Uint8VectorVector jarg1_);
  public final static native void Uint8VectorVector_doAdd__SWIG_0(long jarg1, Uint8VectorVector jarg1_, long jarg2, Uint8Vector jarg2_);
  public final static native void Uint8VectorVector_doAdd__SWIG_1(long jarg1, Uint8VectorVector jarg1_, int jarg2, long jarg3, Uint8Vector jarg3_);
  public final static native long Uint8VectorVector_doRemove(long jarg1, Uint8VectorVector jarg1_, int jarg2);
  public final static native long Uint8VectorVector_doGet(long jarg1, Uint8VectorVector jarg1_, int jarg2);
  public final static native long Uint8VectorVector_doSet(long jarg1, Uint8VectorVector jarg1_, int jarg2, long jarg3, Uint8Vector jarg3_);
  public final static native void Uint8VectorVector_doRemoveRange(long jarg1, Uint8VectorVector jarg1_, int jarg2, int jarg3);
  public final static native void delete_Uint8VectorVector(long jarg1);
  public final static native long new_PrivateKeyVector__SWIG_0();
  public final static native long new_PrivateKeyVector__SWIG_1(long jarg1, PrivateKeyVector jarg1_);
  public final static native int PrivateKeyVector_capacity(long jarg1, PrivateKeyVector jarg1_);
  public final static native void PrivateKeyVector_reserve(long jarg1, PrivateKeyVector jarg1_, int jarg2);
  public final static native boolean PrivateKeyVector_isEmpty(long jarg1, PrivateKeyVector jarg1_);
  public final static native void PrivateKeyVector_clear(long jarg1, PrivateKeyVector jarg1_);
  public final static native long new_PrivateKeyVector__SWIG_2(int jarg1, long jarg2, PrivateKey jarg2_);
  public final static native int PrivateKeyVector_doSize(long jarg1, PrivateKeyVector jarg1_);
  public final static native void PrivateKeyVector_doAdd__SWIG_0(long jarg1, PrivateKeyVector jarg1_, long jarg2, PrivateKey jarg2_);
  public final static native void PrivateKeyVector_doAdd__SWIG_1(long jarg1, PrivateKeyVector jarg1_, int jarg2, long jarg3, PrivateKey jarg3_);
  public final static native long PrivateKeyVector_doRemove(long jarg1, PrivateKeyVector jarg1_, int jarg2);
  public final static native long PrivateKeyVector_doGet(long jarg1, PrivateKeyVector jarg1_, int jarg2);
  public final static native long PrivateKeyVector_doSet(long jarg1, PrivateKeyVector jarg1_, int jarg2, long jarg3, PrivateKey jarg3_);
  public final static native void PrivateKeyVector_doRemoveRange(long jarg1, PrivateKeyVector jarg1_, int jarg2, int jarg3);
  public final static native void delete_PrivateKeyVector(long jarg1);
  public final static native long new_G1ElementVector__SWIG_0();
  public final static native long new_G1ElementVector__SWIG_1(long jarg1, G1ElementVector jarg1_);
  public final static native int G1ElementVector_capacity(long jarg1, G1ElementVector jarg1_);
  public final static native void G1ElementVector_reserve(long jarg1, G1ElementVector jarg1_, int jarg2);
  public final static native boolean G1ElementVector_isEmpty(long jarg1, G1ElementVector jarg1_);
  public final static native void G1ElementVector_clear(long jarg1, G1ElementVector jarg1_);
  public final static native long new_G1ElementVector__SWIG_2(int jarg1, long jarg2, G1Element jarg2_);
  public final static native int G1ElementVector_doSize(long jarg1, G1ElementVector jarg1_);
  public final static native void G1ElementVector_doAdd__SWIG_0(long jarg1, G1ElementVector jarg1_, long jarg2, G1Element jarg2_);
  public final static native void G1ElementVector_doAdd__SWIG_1(long jarg1, G1ElementVector jarg1_, int jarg2, long jarg3, G1Element jarg3_);
  public final static native long G1ElementVector_doRemove(long jarg1, G1ElementVector jarg1_, int jarg2);
  public final static native long G1ElementVector_doGet(long jarg1, G1ElementVector jarg1_, int jarg2);
  public final static native long G1ElementVector_doSet(long jarg1, G1ElementVector jarg1_, int jarg2, long jarg3, G1Element jarg3_);
  public final static native void G1ElementVector_doRemoveRange(long jarg1, G1ElementVector jarg1_, int jarg2, int jarg3);
  public final static native void delete_G1ElementVector(long jarg1);
  public final static native long new_G2ElementVector__SWIG_0();
  public final static native long new_G2ElementVector__SWIG_1(long jarg1, G2ElementVector jarg1_);
  public final static native int G2ElementVector_capacity(long jarg1, G2ElementVector jarg1_);
  public final static native void G2ElementVector_reserve(long jarg1, G2ElementVector jarg1_, int jarg2);
  public final static native boolean G2ElementVector_isEmpty(long jarg1, G2ElementVector jarg1_);
  public final static native void G2ElementVector_clear(long jarg1, G2ElementVector jarg1_);
  public final static native long new_G2ElementVector__SWIG_2(int jarg1, long jarg2, G2Element jarg2_);
  public final static native int G2ElementVector_doSize(long jarg1, G2ElementVector jarg1_);
  public final static native void G2ElementVector_doAdd__SWIG_0(long jarg1, G2ElementVector jarg1_, long jarg2, G2Element jarg2_);
  public final static native void G2ElementVector_doAdd__SWIG_1(long jarg1, G2ElementVector jarg1_, int jarg2, long jarg3, G2Element jarg3_);
  public final static native long G2ElementVector_doRemove(long jarg1, G2ElementVector jarg1_, int jarg2);
  public final static native long G2ElementVector_doGet(long jarg1, G2ElementVector jarg1_, int jarg2);
  public final static native long G2ElementVector_doSet(long jarg1, G2ElementVector jarg1_, int jarg2, long jarg3, G2Element jarg3_);
  public final static native void G2ElementVector_doRemoveRange(long jarg1, G2ElementVector jarg1_, int jarg2, int jarg3);
  public final static native void delete_G2ElementVector(long jarg1);
  public final static native int BLS_MESSAGE_HASH_LEN_get();
  public final static native boolean BLS_init();
  public final static native void BLS_checkRelicErrors();
  public final static native int BLS_RLC_OK_get();
  public final static native int BLS_getContextError();
  public final static native void BLS_setContextError(int jarg1);
  public final static native int BLS_getContext();
  public final static native long new_BLS();
  public final static native void delete_BLS(long jarg1);
  public final static native int ChainCode_SIZE_get();
  public final static native long ChainCode_fromBytes(byte[] jarg1);
  public final static native long new_ChainCode__SWIG_0(long jarg1, ChainCode jarg1_);
  public final static native boolean objectEquals__SWIG_0(long jarg1, ChainCode jarg1_, long jarg2, ChainCode jarg2_);
  public final static native void ChainCode_serialize__SWIG_0(long jarg1, ChainCode jarg1_, byte[] jarg2);
  public final static native byte[] ChainCode_serialize__SWIG_1(long jarg1, ChainCode jarg1_);
  public final static native long new_ChainCode__SWIG_1();
  public final static native void delete_ChainCode(long jarg1);
  public final static native int G1Element_SIZE_get();
  public final static native long new_G1Element__SWIG_0();
  public final static native long G1Element_fromBytes__SWIG_0(byte[] jarg1, boolean jarg2);
  public final static native long G1Element_fromBytes__SWIG_1(byte[] jarg1);
  public final static native long G1Element_fromBytesUnchecked__SWIG_0(byte[] jarg1, boolean jarg2);
  public final static native long G1Element_fromBytesUnchecked__SWIG_1(byte[] jarg1);
  public final static native long G1Element_fromMessage(byte[] jarg1, byte[] jarg2, int jarg3);
  public final static native long G1Element_generator();
  public final static native boolean G1Element_isValid(long jarg1, G1Element jarg1_);
  public final static native void G1Element_checkValid(long jarg1, G1Element jarg1_);
  public final static native long G1Element_negate(long jarg1, G1Element jarg1_);
  public final static native long G1Element_pair(long jarg1, G1Element jarg1_, long jarg2, G2Element jarg2_);
  public final static native long G1Element_getFingerprint__SWIG_0(long jarg1, G1Element jarg1_, boolean jarg2);
  public final static native long G1Element_getFingerprint__SWIG_1(long jarg1, G1Element jarg1_);
  public final static native byte[] G1Element_serialize__SWIG_0(long jarg1, G1Element jarg1_, boolean jarg2);
  public final static native byte[] G1Element_serialize__SWIG_1(long jarg1, G1Element jarg1_);
  public final static native boolean objectEquals__SWIG_1(long jarg1, G1Element jarg1_, long jarg2, G1Element jarg2_);
  public final static native long add__SWIG_0(long jarg1, G1Element jarg1_, long jarg2, G1Element jarg2_);
  public final static native long andOperator(long jarg1, G1Element jarg1_, long jarg2, G2Element jarg2_);
  public final static native long new_G1Element__SWIG_1(long jarg1, G1Element jarg1_);
  public final static native void delete_G1Element(long jarg1);
  public final static native int G2Element_SIZE_get();
  public final static native long new_G2Element__SWIG_0();
  public final static native long G2Element_fromBytes__SWIG_0(byte[] jarg1, boolean jarg2);
  public final static native long G2Element_fromBytes__SWIG_1(byte[] jarg1);
  public final static native long G2Element_fromBytesUnchecked__SWIG_0(byte[] jarg1, boolean jarg2);
  public final static native long G2Element_fromBytesUnchecked__SWIG_1(byte[] jarg1);
  public final static native long G2Element_fromMessage__SWIG_0(byte[] jarg1, byte[] jarg2, int jarg3, boolean jarg4);
  public final static native long G2Element_fromMessage__SWIG_1(byte[] jarg1, byte[] jarg2, int jarg3);
  public final static native long G2Element_generator();
  public final static native boolean G2Element_isValid(long jarg1, G2Element jarg1_);
  public final static native void G2Element_checkValid(long jarg1, G2Element jarg1_);
  public final static native long G2Element_negate(long jarg1, G2Element jarg1_);
  public final static native long G2Element_pair(long jarg1, G2Element jarg1_, long jarg2, G1Element jarg2_);
  public final static native byte[] G2Element_serialize__SWIG_0(long jarg1, G2Element jarg1_, boolean jarg2);
  public final static native byte[] G2Element_serialize__SWIG_1(long jarg1, G2Element jarg1_);
  public final static native boolean objectEquals__SWIG_2(long jarg1, G2Element jarg1_, long jarg2, G2Element jarg2_);
  public final static native long add__SWIG_1(long jarg1, G2Element jarg1_, long jarg2, G2Element jarg2_);
  public final static native long new_G2Element__SWIG_1(long jarg1, G2Element jarg1_);
  public final static native void delete_G2Element(long jarg1);
  public final static native int GTElement_SIZE_get();
  public final static native long GTElement_fromBytes(byte[] jarg1);
  public final static native long GTElement_fromBytesUnchecked(byte[] jarg1);
  public final static native long GTElement_unity();
  public final static native void GTElement_serialize__SWIG_0(long jarg1, GTElement jarg1_, byte[] jarg2);
  public final static native byte[] GTElement_serialize__SWIG_1(long jarg1, GTElement jarg1_);
  public final static native boolean objectEquals__SWIG_3(long jarg1, GTElement jarg1_, long jarg2, GTElement jarg2_);
  public final static native long multiply__SWIG_0(long jarg1, GTElement jarg1_, long jarg2, GTElement jarg2_);
  public final static native void delete_GTElement(long jarg1);
  public final static native int PrivateKey_PRIVATE_KEY_SIZE_get();
  public final static native long PrivateKey_fromSeedBIP32(byte[] jarg1);
  public final static native long PrivateKey_randomPrivateKey();
  public final static native long PrivateKey_fromBytes__SWIG_0(byte[] jarg1, boolean jarg2);
  public final static native long PrivateKey_fromBytes__SWIG_1(byte[] jarg1);
  public final static native long PrivateKey_aggregate(long jarg1, PrivateKeyVector jarg1_);
  public final static native long new_PrivateKey__SWIG_0();
  public final static native long new_PrivateKey__SWIG_1(long jarg1, PrivateKey jarg1_);
  public final static native void delete_PrivateKey(long jarg1);
  public final static native long PrivateKey_getG1Element(long jarg1, PrivateKey jarg1_);
  public final static native long PrivateKey_getG2Element(long jarg1, PrivateKey jarg1_);
  public final static native long PrivateKey_getG2Power(long jarg1, PrivateKey jarg1_, long jarg2, G2Element jarg2_);
  public final static native boolean PrivateKey_isZero(long jarg1, PrivateKey jarg1_);
  public final static native boolean objectEquals__SWIG_4(long jarg1, PrivateKey jarg1_, long jarg2, PrivateKey jarg2_);
  public final static native long multiply__SWIG_1(long jarg1, G1Element jarg1_, long jarg2, PrivateKey jarg2_);
  public final static native long multiply__SWIG_2(long jarg1, PrivateKey jarg1_, long jarg2, G1Element jarg2_);
  public final static native long multiply__SWIG_3(long jarg1, G2Element jarg1_, long jarg2, PrivateKey jarg2_);
  public final static native long multiply__SWIG_4(long jarg1, PrivateKey jarg1_, long jarg2, G2Element jarg2_);
  public final static native void PrivateKey_serialize__SWIG_0(long jarg1, PrivateKey jarg1_, byte[] jarg2);
  public final static native byte[] PrivateKey_serialize__SWIG_1(long jarg1, PrivateKey jarg1_, boolean jarg2);
  public final static native byte[] PrivateKey_serialize__SWIG_2(long jarg1, PrivateKey jarg1_);
  public final static native long PrivateKey_signG2__SWIG_0(long jarg1, PrivateKey jarg1_, byte[] jarg2, long jarg3, byte[] jarg4, long jarg5, boolean jarg6);
  public final static native long PrivateKey_signG2__SWIG_1(long jarg1, PrivateKey jarg1_, byte[] jarg2, long jarg3, byte[] jarg4, long jarg5);
  public final static native boolean PrivateKey_hasKeyData(long jarg1, PrivateKey jarg1_);
  public final static native long ExtendedPublicKey_VERSION_get();
  public final static native long ExtendedPublicKey_SIZE_get();
  public final static native long ExtendedPublicKey_fromBytes__SWIG_0(byte[] jarg1, boolean jarg2);
  public final static native long ExtendedPublicKey_fromBytes__SWIG_1(byte[] jarg1);
  public final static native long ExtendedPublicKey_publicChild__SWIG_0(long jarg1, ExtendedPublicKey jarg1_, long jarg2, boolean jarg3);
  public final static native long ExtendedPublicKey_publicChild__SWIG_1(long jarg1, ExtendedPublicKey jarg1_, long jarg2);
  public final static native long ExtendedPublicKey_getVersion(long jarg1, ExtendedPublicKey jarg1_);
  public final static native short ExtendedPublicKey_getDepth(long jarg1, ExtendedPublicKey jarg1_);
  public final static native long ExtendedPublicKey_getParentFingerprint(long jarg1, ExtendedPublicKey jarg1_);
  public final static native long ExtendedPublicKey_getChildNumber(long jarg1, ExtendedPublicKey jarg1_);
  public final static native long ExtendedPublicKey_getChainCode(long jarg1, ExtendedPublicKey jarg1_);
  public final static native long ExtendedPublicKey_getPublicKey(long jarg1, ExtendedPublicKey jarg1_);
  public final static native boolean objectEquals__SWIG_5(long jarg1, ExtendedPublicKey jarg1_, long jarg2, ExtendedPublicKey jarg2_);
  public final static native void ExtendedPublicKey_serialize__SWIG_0(long jarg1, ExtendedPublicKey jarg1_, byte[] jarg2, boolean jarg3);
  public final static native void ExtendedPublicKey_serialize__SWIG_1(long jarg1, ExtendedPublicKey jarg1_, byte[] jarg2);
  public final static native byte[] ExtendedPublicKey_serialize__SWIG_2(long jarg1, ExtendedPublicKey jarg1_, boolean jarg2);
  public final static native byte[] ExtendedPublicKey_serialize__SWIG_3(long jarg1, ExtendedPublicKey jarg1_);
  public final static native long new_ExtendedPublicKey();
  public final static native void delete_ExtendedPublicKey(long jarg1);
  public final static native long ExtendedPrivateKey_SIZE_get();
  public final static native long ExtendedPrivateKey_fromSeed(byte[] jarg1);
  public final static native long ExtendedPrivateKey_fromBytes(byte[] jarg1);
  public final static native long ExtendedPrivateKey_privateChild__SWIG_0(long jarg1, ExtendedPrivateKey jarg1_, long jarg2, boolean jarg3);
  public final static native long ExtendedPrivateKey_privateChild__SWIG_1(long jarg1, ExtendedPrivateKey jarg1_, long jarg2);
  public final static native long ExtendedPrivateKey_publicChild(long jarg1, ExtendedPrivateKey jarg1_, long jarg2);
  public final static native long ExtendedPrivateKey_getVersion(long jarg1, ExtendedPrivateKey jarg1_);
  public final static native short ExtendedPrivateKey_getDepth(long jarg1, ExtendedPrivateKey jarg1_);
  public final static native long ExtendedPrivateKey_getParentFingerprint(long jarg1, ExtendedPrivateKey jarg1_);
  public final static native long ExtendedPrivateKey_getChildNumber(long jarg1, ExtendedPrivateKey jarg1_);
  public final static native long ExtendedPrivateKey_getChainCode(long jarg1, ExtendedPrivateKey jarg1_);
  public final static native long ExtendedPrivateKey_getPrivateKey(long jarg1, ExtendedPrivateKey jarg1_);
  public final static native long ExtendedPrivateKey_getPublicKey(long jarg1, ExtendedPrivateKey jarg1_);
  public final static native long ExtendedPrivateKey_getExtendedPublicKey__SWIG_0(long jarg1, ExtendedPrivateKey jarg1_, boolean jarg2);
  public final static native long ExtendedPrivateKey_getExtendedPublicKey__SWIG_1(long jarg1, ExtendedPrivateKey jarg1_);
  public final static native boolean objectEquals__SWIG_6(long jarg1, ExtendedPrivateKey jarg1_, long jarg2, ExtendedPrivateKey jarg2_);
  public final static native void ExtendedPrivateKey_serialize__SWIG_0(long jarg1, ExtendedPrivateKey jarg1_, byte[] jarg2);
  public final static native byte[] ExtendedPrivateKey_serialize__SWIG_1(long jarg1, ExtendedPrivateKey jarg1_);
  public final static native void delete_ExtendedPrivateKey(long jarg1);
  public final static native long new_ExtendedPrivateKey();
  public final static native short HDKeys_HASH_LEN_get();
  public final static native long HDKeys_keyGen(byte[] jarg1);
  public final static native void HDKeys_iKMToLamportSk(byte[] jarg1, byte[] jarg2, long jarg3, byte[] jarg4, long jarg5);
  public final static native void HDKeys_parentSkToLamportPK(byte[] jarg1, long jarg2, PrivateKey jarg2_, long jarg3);
  public final static native long HDKeys_deriveChildSk(long jarg1, PrivateKey jarg1_, long jarg2);
  public final static native long HDKeys_deriveChildSkUnhardened(long jarg1, PrivateKey jarg1_, long jarg2);
  public final static native long HDKeys_deriveChildG1Unhardened(long jarg1, G1Element jarg1_, long jarg2);
  public final static native long HDKeys_deriveChildG2Unhardened(long jarg1, G2Element jarg1_, long jarg2);
  public final static native long new_HDKeys();
  public final static native void delete_HDKeys(long jarg1);
  public final static native short HKDF256_HASH_LEN_get();
  public final static native void HKDF256_extract(byte[] jarg1, byte[] jarg2, long jarg3, byte[] jarg4, long jarg5);
  public final static native void HKDF256_expand(byte[] jarg1, long jarg2, byte[] jarg3, byte[] jarg4, long jarg5);
  public final static native void HKDF256_extractExpand(byte[] jarg1, long jarg2, byte[] jarg3, long jarg4, byte[] jarg5, long jarg6, byte[] jarg7, long jarg8);
  public final static native long new_HKDF256();
  public final static native void delete_HKDF256(long jarg1);
  public final static native long new_CoreMPL(String jarg1);
  public final static native long CoreMPL_keyGen(long jarg1, CoreMPL jarg1_, byte[] jarg2);
  public final static native byte[] CoreMPL_skToPk(long jarg1, CoreMPL jarg1_, long jarg2, PrivateKey jarg2_);
  public final static native long CoreMPL_skToG1(long jarg1, CoreMPL jarg1_, long jarg2, PrivateKey jarg2_);
  public final static native long CoreMPL_sign(long jarg1, CoreMPL jarg1_, long jarg2, PrivateKey jarg2_, byte[] jarg3);
  public final static native boolean CoreMPL_verify__SWIG_0(long jarg1, CoreMPL jarg1_, byte[] jarg2, byte[] jarg3, byte[] jarg4);
  public final static native boolean CoreMPL_verify__SWIG_1(long jarg1, CoreMPL jarg1_, long jarg2, G1Element jarg2_, byte[] jarg3, long jarg4, G2Element jarg4_);
  public final static native byte[] CoreMPL_aggregate__SWIG_0(long jarg1, CoreMPL jarg1_, long jarg2, Uint8VectorVector jarg2_);
  public final static native long CoreMPL_aggregate__SWIG_1(long jarg1, CoreMPL jarg1_, long jarg2, G2ElementVector jarg2_);
  public final static native long CoreMPL_aggregate__SWIG_2(long jarg1, CoreMPL jarg1_, long jarg2, G1ElementVector jarg2_);
  public final static native long CoreMPL_aggregateSecure(long jarg1, CoreMPL jarg1_, long jarg2, G1ElementVector jarg2_, long jarg3, G2ElementVector jarg3_, byte[] jarg4);
  public final static native boolean CoreMPL_verifySecure(long jarg1, CoreMPL jarg1_, long jarg2, G1ElementVector jarg2_, long jarg3, G2Element jarg3_, byte[] jarg4);
  public final static native boolean CoreMPL_aggregateVerify__SWIG_0(long jarg1, CoreMPL jarg1_, long jarg2, Uint8VectorVector jarg2_, long jarg3, Uint8VectorVector jarg3_, byte[] jarg4);
  public final static native boolean CoreMPL_aggregateVerify__SWIG_1(long jarg1, CoreMPL jarg1_, long jarg2, G1ElementVector jarg2_, long jarg3, Uint8VectorVector jarg3_, long jarg4, G2Element jarg4_);
  public final static native long CoreMPL_deriveChildSk(long jarg1, CoreMPL jarg1_, long jarg2, PrivateKey jarg2_, long jarg3);
  public final static native long CoreMPL_deriveChildSkUnhardened(long jarg1, CoreMPL jarg1_, long jarg2, PrivateKey jarg2_, long jarg3);
  public final static native long CoreMPL_deriveChildPkUnhardened(long jarg1, CoreMPL jarg1_, long jarg2, G1Element jarg2_, long jarg3);
  public final static native void delete_CoreMPL(long jarg1);
  public final static native String BasicSchemeMPL_CIPHERSUITE_ID_get();
  public final static native long new_BasicSchemeMPL();
  public final static native boolean BasicSchemeMPL_aggregateVerify__SWIG_0(long jarg1, BasicSchemeMPL jarg1_, long jarg2, Uint8VectorVector jarg2_, long jarg3, Uint8VectorVector jarg3_, byte[] jarg4);
  public final static native boolean BasicSchemeMPL_aggregateVerify__SWIG_1(long jarg1, BasicSchemeMPL jarg1_, long jarg2, G1ElementVector jarg2_, long jarg3, Uint8VectorVector jarg3_, long jarg4, G2Element jarg4_);
  public final static native void delete_BasicSchemeMPL(long jarg1);
  public final static native String AugSchemeMPL_CIPHERSUITE_ID_get();
  public final static native long new_AugSchemeMPL();
  public final static native long AugSchemeMPL_sign__SWIG_0(long jarg1, AugSchemeMPL jarg1_, long jarg2, PrivateKey jarg2_, byte[] jarg3);
  public final static native long AugSchemeMPL_sign__SWIG_1(long jarg1, AugSchemeMPL jarg1_, long jarg2, PrivateKey jarg2_, byte[] jarg3, long jarg4, G1Element jarg4_);
  public final static native boolean AugSchemeMPL_verify(long jarg1, AugSchemeMPL jarg1_, byte[] jarg2, byte[] jarg3, byte[] jarg4);
  public final static native boolean AugSchemeMPL_aggregateVerify__SWIG_0(long jarg1, AugSchemeMPL jarg1_, long jarg2, Uint8VectorVector jarg2_, long jarg3, Uint8VectorVector jarg3_, byte[] jarg4);
  public final static native boolean AugSchemeMPL_aggregateVerify__SWIG_1(long jarg1, AugSchemeMPL jarg1_, long jarg2, G1ElementVector jarg2_, long jarg3, Uint8VectorVector jarg3_, long jarg4, G2Element jarg4_);
  public final static native void delete_AugSchemeMPL(long jarg1);
  public final static native String PopSchemeMPL_CIPHERSUITE_ID_get();
  public final static native String PopSchemeMPL_POP_CIPHERSUITE_ID_get();
  public final static native long new_PopSchemeMPL();
  public final static native long PopSchemeMPL_popProve(long jarg1, PopSchemeMPL jarg1_, long jarg2, PrivateKey jarg2_);
  public final static native boolean PopSchemeMPL_popVerify__SWIG_0(long jarg1, PopSchemeMPL jarg1_, long jarg2, G1Element jarg2_, long jarg3, G2Element jarg3_);
  public final static native boolean PopSchemeMPL_popVerify__SWIG_1(long jarg1, PopSchemeMPL jarg1_, byte[] jarg2, byte[] jarg3);
  public final static native boolean PopSchemeMPL_fastAggregateVerify__SWIG_0(long jarg1, PopSchemeMPL jarg1_, long jarg2, G1ElementVector jarg2_, byte[] jarg3, long jarg4, G2Element jarg4_);
  public final static native boolean PopSchemeMPL_fastAggregateVerify__SWIG_1(long jarg1, PopSchemeMPL jarg1_, long jarg2, Uint8VectorVector jarg2_, byte[] jarg3, byte[] jarg4);
  public final static native void delete_PopSchemeMPL(long jarg1);
  public final static native long new_LegacySchemeMPL();
  public final static native byte[] LegacySchemeMPL_skToPk(long jarg1, LegacySchemeMPL jarg1_, long jarg2, PrivateKey jarg2_);
  public final static native long LegacySchemeMPL_sign(long jarg1, LegacySchemeMPL jarg1_, long jarg2, PrivateKey jarg2_, byte[] jarg3);
  public final static native boolean LegacySchemeMPL_verify(long jarg1, LegacySchemeMPL jarg1_, byte[] jarg2, byte[] jarg3, byte[] jarg4);
  public final static native byte[] LegacySchemeMPL_aggregate(long jarg1, LegacySchemeMPL jarg1_, long jarg2, Uint8VectorVector jarg2_);
  public final static native long LegacySchemeMPL_aggregateSecure(long jarg1, LegacySchemeMPL jarg1_, long jarg2, G1ElementVector jarg2_, long jarg3, G2ElementVector jarg3_, byte[] jarg4);
  public final static native boolean LegacySchemeMPL_verifySecure(long jarg1, LegacySchemeMPL jarg1_, long jarg2, G1ElementVector jarg2_, long jarg3, G2Element jarg3_, byte[] jarg4);
  public final static native boolean LegacySchemeMPL_aggregateVerify(long jarg1, LegacySchemeMPL jarg1_, long jarg2, G1ElementVector jarg2_, long jarg3, Uint8VectorVector jarg3_, long jarg4, G2Element jarg4_);
  public final static native void delete_LegacySchemeMPL(long jarg1);
  public final static native long privateKeyShare(long jarg1, PrivateKeyVector jarg1_, byte[] jarg2);
  public final static native long publicKeyShare(long jarg1, G1ElementVector jarg1_, byte[] jarg2);
  public final static native long signatureShare(long jarg1, G2ElementVector jarg1_, byte[] jarg2);
  public final static native long sign(long jarg1, PrivateKey jarg1_, byte[] jarg2);
  public final static native boolean verify(long jarg1, G1Element jarg1_, byte[] jarg2, long jarg3, G2Element jarg3_);
  public final static native long privateKeyRecover(long jarg1, PrivateKeyVector jarg1_, long jarg2, Uint8VectorVector jarg2_);
  public final static native long publicKeyRecover(long jarg1, G1ElementVector jarg1_, long jarg2, Uint8VectorVector jarg2_);
  public final static native long signatureRecover(long jarg1, G2ElementVector jarg1_, long jarg2, Uint8VectorVector jarg2_);
  public final static native long BasicSchemeMPL_SWIGUpcast(long jarg1);
  public final static native long AugSchemeMPL_SWIGUpcast(long jarg1);
  public final static native long PopSchemeMPL_SWIGUpcast(long jarg1);
  public final static native long LegacySchemeMPL_SWIGUpcast(long jarg1);
}
